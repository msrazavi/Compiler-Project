1.  program: start_scope declaration_list end_scope
2.  declaration_list: declaration_list declaration
3.  declaration_list: declaration
4.  declaration: var_declaration
5.  declaration: fun_declaration
6.  var_declaration: declare type_specifier declare_id ID ';'
7.  var_declaration: declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
8.  type_specifier: "int"
9.  type_specifier: "void"
10. fun_declaration: declare type_specifier declare_id ID declare_func '(' params ')' compound_stmt
11. params: param_list
12. params: "void"
13. param_list: param_list ',' param declare_scope_increment declare_size_increment
14. param_list: param declare_scope_increment declare_size_increment
15. param: declare type_specifier declare_id ID
16. param: declare type_specifier declare_id ID declare_arr '[' ']'
17. compound_stmt: '{' start_scope local_declarations statement_list end_scope '}'
18. local_declarations: local_declarations var_declaration
19. local_declarations: /* epsilon */
20. statement_list: statement_list statement
21. statement_list: /* epsilon */
22. statement: expression_stmt
23. statement: compound_stmt
24. statement: selection_stmt
25. statement: iteration_stmt
26. statement: return_stmt
27. statement: switch_stmt
28. expression_stmt: expression ';'
29. expression_stmt: "break" ';'
30. expression_stmt: ';'
31. selection_stmt: "if" '(' expression ')' save statement "endif" if
32. selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
33. iteration_stmt: "while" '(' expression ')' statement while_loop
34. return_stmt: "return" ';'
35. return_stmt: "return" expression ';'
36. switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'
37. case_stmts: case_stmts case_stmt
38. case_stmts: /* epsilon */
39. case_stmt: "case" save_const NUM ':' statement_list
40. default_stmt: "default" ':' statement_list
41. default_stmt: /* epsilon */
42. expression: var '=' expression
43. expression: simple_expression
44. var: push_id ID
45. var: push_id ID '[' expression ']' index_addr
46. simple_expression: additive_expression '<' additive_expression lt
47. simple_expression: additive_expression "==" additive_expression eq
48. simple_expression: additive_expression
49. additive_expression: additive_expression '+' term add
50. additive_expression: additive_expression '-' term sub
51. additive_expression: term
52. term: term '*' factor mult
53. term: term '/' factor div
54. term: factor
55. factor: '(' expression ')'
56. factor: var
57. factor: call
58. factor: save_const NUM
59. call: "output" '(' expression ')' output
60. call: push_id ID '(' args ')' call_fun
61. args: arg_list
62. args: /* epsilon */
63. arg_list: arg_list ',' expression
64. arg_list: expression
65. start_scope: /* epsilon */
66. end_scope: /* epsilon */
67. push_id: /* epsilon */
68. save_const: /* epsilon */
69. save: /* epsilon */
70. label: /* epsilon */
71. declare: /* epsilon */
72. declare_id: /* epsilon */
73. declare_arr: /* epsilon */
74. declare_func: /* epsilon */
75. declare_size: /* epsilon */
76. declare_scope_increment: /* epsilon */
77. ifelse: /* epsilon */
78. lt: /* epsilon */
79. call_fun: /* epsilon */
80. output: /* epsilon */
81. add: /* epsilon */
82. while_loop: /* epsilon */
83. div: /* epsilon */
84. eq: /* epsilon */
85. index_addr: /* epsilon */
86. if: /* epsilon */
87. mult: /* epsilon */
88. declare_size_increment: /* epsilon */
89. sub: /* epsilon */