Grammar

    0 $accept: program $end

    1 program: start_scope declaration_list "action_end_scope"

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: declare type_specifier declare_id ID ';'
    7                | declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: declare type_specifier declare_id ID declare_func '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param declare_scope_increment "action_declare_size_increment"
   14           | param declare_scope_increment "action_declare_size_increment"

   15 param: declare type_specifier declare_id ID
   16      | declare type_specifier declare_id ID declare_arr '[' ']'

   17 compound_stmt: '{' start_scope local_declarations statement_list end_scope '}'

   18 local_declarations: local_declarations var_declaration
   19                   | /* empty */

   20 statement_list: statement_list statement
   21               | /* empty */

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' save statement "endif" "action_if"
   32               | "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"

   33 iteration_stmt: "while" '(' expression ')' statement "action_while_loop"

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | /* empty */

   39 case_stmt: "case" save_const NUM ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | /* empty */

   42 expression: var '=' expression
   43           | simple_expression

   44 var: push_id ID
   45    | push_id ID '[' expression ']' "action_index_addr"

   46 simple_expression: additive_expression '<' additive_expression "action_lt"
   47                  | additive_expression "==" additive_expression "action_eq"
   48                  | additive_expression

   49 additive_expression: additive_expression '+' term "action_add"
   50                    | additive_expression '-' term "action_sub"
   51                    | term

   52 term: term '*' factor "action_mult"
   53     | term '/' factor "action_div"
   54     | factor

   55 factor: '(' expression ')'
   56       | var
   57       | call
   58       | save_const NUM

   59 call: "output" '(' expression ')' "action_output"
   60     | push_id ID '(' args ')' "action_call_fun"

   61 args: arg_list
   62     | /* empty */

   63 arg_list: arg_list ',' expression
   64         | expression

   65 start_scope: "action_start_scope"

   66 end_scope: "action_end_scope"

   67 push_id: "action_push_id"

   68 save_const: "action_save_const"

   69 save: "action_save"

   70 label: "action_label"

   71 declare: "action_declare"

   72 declare_id: "action_declare_id"

   73 declare_arr: "action_declare_arr"

   74 declare_func: "action_declare_func"

   75 declare_size: "action_declare_size"

   76 declare_scope_increment: "action_declare_scope_increment"


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 31 32 33 36 55 59 60
')' (41) 10 31 32 33 36 55 59 60
'*' (42) 52
'+' (43) 49
',' (44) 13 63
'-' (45) 50
'/' (47) 53
':' (58) 39 40
';' (59) 6 7 28 29 30 34 35
'<' (60) 46
'=' (61) 42
'[' (91) 7 16 45
']' (93) 7 16 45
'{' (123) 17 36
'}' (125) 17 36
error (256)
NUM (258) 7 39 58
ID (259) 6 7 10 15 16 44 45 60
"action_end_scope" (260) 1 66
"int" (261) 8
"void" (262) 9 12
"action_declare_size_increment" (263) 13 14
"break" (264) 29
"if" (265) 31 32
"endif" (266) 31 32
"action_if" (267) 31
"else" (268) 32
"action_ifelse" (269) 32
"while" (270) 33
"action_while_loop" (271) 33
"return" (272) 34 35
"switch" (273) 36
"case" (274) 39
"default" (275) 40
"action_index_addr" (276) 45
"action_lt" (277) 46
"==" (278) 47
"action_eq" (279) 47
"action_add" (280) 49
"action_sub" (281) 50
"action_mult" (282) 52
"action_div" (283) 53
"output" (284) 59
"action_output" (285) 59
"action_call_fun" (286) 60
"action_start_scope" (287) 65
"action_push_id" (288) 67
"action_save_const" (289) 68
"action_save" (290) 69
"action_label" (291) 70
"action_declare" (292) 71
"action_declare_id" (293) 72
"action_declare_arr" (294) 73
"action_declare_func" (295) 74
"action_declare_size" (296) 75
"action_declare_scope_increment" (297) 76


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1, on right: 0
declaration_list (60)
    on left: 2 3, on right: 1 2
declaration (61)
    on left: 4 5, on right: 2 3
var_declaration (62)
    on left: 6 7, on right: 4 18
type_specifier (63)
    on left: 8 9, on right: 6 7 10 15 16
fun_declaration (64)
    on left: 10, on right: 5
params (65)
    on left: 11 12, on right: 10
param_list (66)
    on left: 13 14, on right: 11 13
param (67)
    on left: 15 16, on right: 13 14
compound_stmt (68)
    on left: 17, on right: 10 23
local_declarations (69)
    on left: 18 19, on right: 17 18
statement_list (70)
    on left: 20 21, on right: 17 20 39 40
statement (71)
    on left: 22 23 24 25 26 27, on right: 20 31 32 33
expression_stmt (72)
    on left: 28 29 30, on right: 22
selection_stmt (73)
    on left: 31 32, on right: 24
iteration_stmt (74)
    on left: 33, on right: 25
return_stmt (75)
    on left: 34 35, on right: 26
switch_stmt (76)
    on left: 36, on right: 27
case_stmts (77)
    on left: 37 38, on right: 36 37
case_stmt (78)
    on left: 39, on right: 37
default_stmt (79)
    on left: 40 41, on right: 36
expression (80)
    on left: 42 43, on right: 28 31 32 33 35 36 42 45 55 59 63 64
var (81)
    on left: 44 45, on right: 42 56
simple_expression (82)
    on left: 46 47 48, on right: 43
additive_expression (83)
    on left: 49 50 51, on right: 46 47 48 49 50
term (84)
    on left: 52 53 54, on right: 49 50 51 52 53
factor (85)
    on left: 55 56 57 58, on right: 52 53 54
call (86)
    on left: 59 60, on right: 57
args (87)
    on left: 61 62, on right: 60
arg_list (88)
    on left: 63 64, on right: 61 63
start_scope (89)
    on left: 65, on right: 1 17
end_scope (90)
    on left: 66, on right: 17
push_id (91)
    on left: 67, on right: 44 45 60
save_const (92)
    on left: 68, on right: 39 58
save (93)
    on left: 69, on right: 31 32
label (94)
    on left: 70, on right: 32
declare (95)
    on left: 71, on right: 6 7 10 15 16
declare_id (96)
    on left: 72, on right: 6 7 10 15 16
declare_arr (97)
    on left: 73, on right: 7 16
declare_func (98)
    on left: 74, on right: 10
declare_size (99)
    on left: 75, on right: 7
declare_scope_increment (100)
    on left: 76, on right: 13 14


state 0

    0 $accept: . program $end
    1 program: . start_scope declaration_list "action_end_scope"
   65 start_scope: . "action_start_scope"

    "action_start_scope"  shift, and go to state 1

    program      go to state 2
    start_scope  go to state 3


state 1

   65 start_scope: "action_start_scope" .

    $default  reduce using rule 65 (start_scope)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: start_scope . declaration_list "action_end_scope"
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . declare type_specifier declare_id ID ';'
    7                | . declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
   10 fun_declaration: . declare type_specifier declare_id ID declare_func '(' params ')' compound_stmt
   71 declare: . "action_declare"

    "action_declare"  shift, and go to state 5

    declaration_list  go to state 6
    declaration       go to state 7
    var_declaration   go to state 8
    fun_declaration   go to state 9
    declare           go to state 10


state 4

    0 $accept: program $end .

    $default  accept


state 5

   71 declare: "action_declare" .

    $default  reduce using rule 71 (declare)


state 6

    1 program: start_scope declaration_list . "action_end_scope"
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . declare type_specifier declare_id ID ';'
    7                | . declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
   10 fun_declaration: . declare type_specifier declare_id ID declare_func '(' params ')' compound_stmt
   71 declare: . "action_declare"

    "action_end_scope"  shift, and go to state 11
    "action_declare"    shift, and go to state 5

    declaration      go to state 12
    var_declaration  go to state 8
    fun_declaration  go to state 9
    declare          go to state 10


state 7

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 8

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 9

    5 declaration: fun_declaration .

    $default  reduce using rule 5 (declaration)


state 10

    6 var_declaration: declare . type_specifier declare_id ID ';'
    7                | declare . type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: declare . type_specifier declare_id ID declare_func '(' params ')' compound_stmt

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 15


state 11

    1 program: start_scope declaration_list "action_end_scope" .

    $default  reduce using rule 1 (program)


state 12

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 13

    8 type_specifier: "int" .

    $default  reduce using rule 8 (type_specifier)


state 14

    9 type_specifier: "void" .

    $default  reduce using rule 9 (type_specifier)


state 15

    6 var_declaration: declare type_specifier . declare_id ID ';'
    7                | declare type_specifier . declare_id ID declare_arr '[' declare_size NUM ']' ';'
   10 fun_declaration: declare type_specifier . declare_id ID declare_func '(' params ')' compound_stmt
   72 declare_id: . "action_declare_id"

    "action_declare_id"  shift, and go to state 16

    declare_id  go to state 17


state 16

   72 declare_id: "action_declare_id" .

    $default  reduce using rule 72 (declare_id)


state 17

    6 var_declaration: declare type_specifier declare_id . ID ';'
    7                | declare type_specifier declare_id . ID declare_arr '[' declare_size NUM ']' ';'
   10 fun_declaration: declare type_specifier declare_id . ID declare_func '(' params ')' compound_stmt

    ID  shift, and go to state 18


state 18

    6 var_declaration: declare type_specifier declare_id ID . ';'
    7                | declare type_specifier declare_id ID . declare_arr '[' declare_size NUM ']' ';'
   10 fun_declaration: declare type_specifier declare_id ID . declare_func '(' params ')' compound_stmt
   73 declare_arr: . "action_declare_arr"
   74 declare_func: . "action_declare_func"

    ';'                    shift, and go to state 19
    "action_declare_arr"   shift, and go to state 20
    "action_declare_func"  shift, and go to state 21

    declare_arr   go to state 22
    declare_func  go to state 23


state 19

    6 var_declaration: declare type_specifier declare_id ID ';' .

    $default  reduce using rule 6 (var_declaration)


state 20

   73 declare_arr: "action_declare_arr" .

    $default  reduce using rule 73 (declare_arr)


state 21

   74 declare_func: "action_declare_func" .

    $default  reduce using rule 74 (declare_func)


state 22

    7 var_declaration: declare type_specifier declare_id ID declare_arr . '[' declare_size NUM ']' ';'

    '['  shift, and go to state 24


state 23

   10 fun_declaration: declare type_specifier declare_id ID declare_func . '(' params ')' compound_stmt

    '('  shift, and go to state 25


state 24

    7 var_declaration: declare type_specifier declare_id ID declare_arr '[' . declare_size NUM ']' ';'
   75 declare_size: . "action_declare_size"

    "action_declare_size"  shift, and go to state 26

    declare_size  go to state 27


state 25

   10 fun_declaration: declare type_specifier declare_id ID declare_func '(' . params ')' compound_stmt
   11 params: . param_list
   12       | . "void"
   13 param_list: . param_list ',' param declare_scope_increment "action_declare_size_increment"
   14           | . param declare_scope_increment "action_declare_size_increment"
   15 param: . declare type_specifier declare_id ID
   16      | . declare type_specifier declare_id ID declare_arr '[' ']'
   71 declare: . "action_declare"

    "void"            shift, and go to state 28
    "action_declare"  shift, and go to state 5

    params      go to state 29
    param_list  go to state 30
    param       go to state 31
    declare     go to state 32


state 26

   75 declare_size: "action_declare_size" .

    $default  reduce using rule 75 (declare_size)


state 27

    7 var_declaration: declare type_specifier declare_id ID declare_arr '[' declare_size . NUM ']' ';'

    NUM  shift, and go to state 33


state 28

   12 params: "void" .

    $default  reduce using rule 12 (params)


state 29

   10 fun_declaration: declare type_specifier declare_id ID declare_func '(' params . ')' compound_stmt

    ')'  shift, and go to state 34


state 30

   11 params: param_list .  [')']
   13 param_list: param_list . ',' param declare_scope_increment "action_declare_size_increment"

    ','  shift, and go to state 35

    $default  reduce using rule 11 (params)


state 31

   14 param_list: param . declare_scope_increment "action_declare_size_increment"
   76 declare_scope_increment: . "action_declare_scope_increment"

    "action_declare_scope_increment"  shift, and go to state 36

    declare_scope_increment  go to state 37


state 32

    8 type_specifier: . "int"
    9               | . "void"
   15 param: declare . type_specifier declare_id ID
   16      | declare . type_specifier declare_id ID declare_arr '[' ']'

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 38


state 33

    7 var_declaration: declare type_specifier declare_id ID declare_arr '[' declare_size NUM . ']' ';'

    ']'  shift, and go to state 39


state 34

   10 fun_declaration: declare type_specifier declare_id ID declare_func '(' params ')' . compound_stmt
   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'

    '{'  shift, and go to state 40

    compound_stmt  go to state 41


state 35

   13 param_list: param_list ',' . param declare_scope_increment "action_declare_size_increment"
   15 param: . declare type_specifier declare_id ID
   16      | . declare type_specifier declare_id ID declare_arr '[' ']'
   71 declare: . "action_declare"

    "action_declare"  shift, and go to state 5

    param    go to state 42
    declare  go to state 32


state 36

   76 declare_scope_increment: "action_declare_scope_increment" .

    $default  reduce using rule 76 (declare_scope_increment)


state 37

   14 param_list: param declare_scope_increment . "action_declare_size_increment"

    "action_declare_size_increment"  shift, and go to state 43


state 38

   15 param: declare type_specifier . declare_id ID
   16      | declare type_specifier . declare_id ID declare_arr '[' ']'
   72 declare_id: . "action_declare_id"

    "action_declare_id"  shift, and go to state 16

    declare_id  go to state 44


state 39

    7 var_declaration: declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' . ';'

    ';'  shift, and go to state 45


state 40

   17 compound_stmt: '{' . start_scope local_declarations statement_list end_scope '}'
   65 start_scope: . "action_start_scope"

    "action_start_scope"  shift, and go to state 1

    start_scope  go to state 46


state 41

   10 fun_declaration: declare type_specifier declare_id ID declare_func '(' params ')' compound_stmt .

    $default  reduce using rule 10 (fun_declaration)


state 42

   13 param_list: param_list ',' param . declare_scope_increment "action_declare_size_increment"
   76 declare_scope_increment: . "action_declare_scope_increment"

    "action_declare_scope_increment"  shift, and go to state 36

    declare_scope_increment  go to state 47


state 43

   14 param_list: param declare_scope_increment "action_declare_size_increment" .

    $default  reduce using rule 14 (param_list)


state 44

   15 param: declare type_specifier declare_id . ID
   16      | declare type_specifier declare_id . ID declare_arr '[' ']'

    ID  shift, and go to state 48


state 45

    7 var_declaration: declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';' .

    $default  reduce using rule 7 (var_declaration)


state 46

   17 compound_stmt: '{' start_scope . local_declarations statement_list end_scope '}'
   18 local_declarations: . local_declarations var_declaration
   19                   | .

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 49


state 47

   13 param_list: param_list ',' param declare_scope_increment . "action_declare_size_increment"

    "action_declare_size_increment"  shift, and go to state 50


state 48

   15 param: declare type_specifier declare_id ID .  ["action_declare_scope_increment"]
   16      | declare type_specifier declare_id ID . declare_arr '[' ']'
   73 declare_arr: . "action_declare_arr"

    "action_declare_arr"  shift, and go to state 20

    $default  reduce using rule 15 (param)

    declare_arr  go to state 51


state 49

    6 var_declaration: . declare type_specifier declare_id ID ';'
    7                | . declare type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
   17 compound_stmt: '{' start_scope local_declarations . statement_list end_scope '}'
   18 local_declarations: local_declarations . var_declaration
   20 statement_list: . statement_list statement
   21               | .  ["action_end_scope", ';', '(', '{', "break", "if", "while", "return", "switch", "output", "action_push_id", "action_save_const"]
   71 declare: . "action_declare"

    "action_declare"  shift, and go to state 5

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 52
    statement_list   go to state 53
    declare          go to state 54


state 50

   13 param_list: param_list ',' param declare_scope_increment "action_declare_size_increment" .

    $default  reduce using rule 13 (param_list)


state 51

   16 param: declare type_specifier declare_id ID declare_arr . '[' ']'

    '['  shift, and go to state 55


state 52

   18 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 18 (local_declarations)


state 53

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   17              | '{' start_scope local_declarations statement_list . end_scope '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   66 end_scope: . "action_end_scope"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    "action_end_scope"   shift, and go to state 56
    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    compound_stmt        go to state 67
    statement            go to state 68
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    end_scope            go to state 81
    push_id              go to state 82
    save_const           go to state 83


state 54

    6 var_declaration: declare . type_specifier declare_id ID ';'
    7                | declare . type_specifier declare_id ID declare_arr '[' declare_size NUM ']' ';'
    8 type_specifier: . "int"
    9               | . "void"

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 84


state 55

   16 param: declare type_specifier declare_id ID declare_arr '[' . ']'

    ']'  shift, and go to state 85


state 56

   66 end_scope: "action_end_scope" .

    $default  reduce using rule 66 (end_scope)


state 57

   30 expression_stmt: ';' .

    $default  reduce using rule 30 (expression_stmt)


state 58

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   55       | '(' . expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 86
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 59

   29 expression_stmt: "break" . ';'

    ';'  shift, and go to state 87


state 60

   31 selection_stmt: "if" . '(' expression ')' save statement "endif" "action_if"
   32               | "if" . '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"

    '('  shift, and go to state 88


state 61

   33 iteration_stmt: "while" . '(' expression ')' statement "action_while_loop"

    '('  shift, and go to state 89


state 62

   34 return_stmt: "return" . ';'
   35            | "return" . expression ';'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 90
    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 91
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 63

   36 switch_stmt: "switch" . '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 92


state 64

   59 call: "output" . '(' expression ')' "action_output"

    '('  shift, and go to state 93


state 65

   67 push_id: "action_push_id" .

    $default  reduce using rule 67 (push_id)


state 66

   68 save_const: "action_save_const" .

    $default  reduce using rule 68 (save_const)


state 67

   23 statement: compound_stmt .

    $default  reduce using rule 23 (statement)


state 68

   20 statement_list: statement_list statement .

    $default  reduce using rule 20 (statement_list)


state 69

   22 statement: expression_stmt .

    $default  reduce using rule 22 (statement)


state 70

   24 statement: selection_stmt .

    $default  reduce using rule 24 (statement)


state 71

   25 statement: iteration_stmt .

    $default  reduce using rule 25 (statement)


state 72

   26 statement: return_stmt .

    $default  reduce using rule 26 (statement)


state 73

   27 statement: switch_stmt .

    $default  reduce using rule 27 (statement)


state 74

   28 expression_stmt: expression . ';'

    ';'  shift, and go to state 94


state 75

   42 expression: var . '=' expression
   56 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 95

    $default  reduce using rule 56 (factor)


state 76

   43 expression: simple_expression .

    $default  reduce using rule 43 (expression)


state 77

   46 simple_expression: additive_expression . '<' additive_expression "action_lt"
   47                  | additive_expression . "==" additive_expression "action_eq"
   48                  | additive_expression .  [';', ']', ')', ',']
   49 additive_expression: additive_expression . '+' term "action_add"
   50                    | additive_expression . '-' term "action_sub"

    '<'   shift, and go to state 96
    "=="  shift, and go to state 97
    '+'   shift, and go to state 98
    '-'   shift, and go to state 99

    $default  reduce using rule 48 (simple_expression)


state 78

   51 additive_expression: term .  [';', ']', ')', ',', '<', "action_lt", "==", "action_eq", '+', '-']
   52 term: term . '*' factor "action_mult"
   53     | term . '/' factor "action_div"

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    $default  reduce using rule 51 (additive_expression)


state 79

   54 term: factor .

    $default  reduce using rule 54 (term)


state 80

   57 factor: call .

    $default  reduce using rule 57 (factor)


state 81

   17 compound_stmt: '{' start_scope local_declarations statement_list end_scope . '}'

    '}'  shift, and go to state 102


state 82

   44 var: push_id . ID
   45    | push_id . ID '[' expression ']' "action_index_addr"
   60 call: push_id . ID '(' args ')' "action_call_fun"

    ID  shift, and go to state 103


state 83

   58 factor: save_const . NUM

    NUM  shift, and go to state 104


state 84

    6 var_declaration: declare type_specifier . declare_id ID ';'
    7                | declare type_specifier . declare_id ID declare_arr '[' declare_size NUM ']' ';'
   72 declare_id: . "action_declare_id"

    "action_declare_id"  shift, and go to state 16

    declare_id  go to state 105


state 85

   16 param: declare type_specifier declare_id ID declare_arr '[' ']' .

    $default  reduce using rule 16 (param)


state 86

   55 factor: '(' expression . ')'

    ')'  shift, and go to state 106


state 87

   29 expression_stmt: "break" ';' .

    $default  reduce using rule 29 (expression_stmt)


state 88

   31 selection_stmt: "if" '(' . expression ')' save statement "endif" "action_if"
   32               | "if" '(' . expression ')' save statement save "else" label statement "endif" "action_ifelse"
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 107
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 89

   33 iteration_stmt: "while" '(' . expression ')' statement "action_while_loop"
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 108
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 90

   34 return_stmt: "return" ';' .

    $default  reduce using rule 34 (return_stmt)


state 91

   35 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 109


state 92

   36 switch_stmt: "switch" '(' . expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 110
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 93

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   59     | "output" '(' . expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 111
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 94

   28 expression_stmt: expression ';' .

    $default  reduce using rule 28 (expression_stmt)


state 95

   42 expression: . var '=' expression
   42           | var '=' . expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 112
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 96

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: additive_expression '<' . additive_expression "action_lt"
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var                  go to state 113
    additive_expression  go to state 114
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 97

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   47 simple_expression: additive_expression "==" . additive_expression "action_eq"
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var                  go to state 113
    additive_expression  go to state 115
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 98

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   49 additive_expression: additive_expression '+' . term "action_add"
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var         go to state 113
    term        go to state 116
    factor      go to state 79
    call        go to state 80
    push_id     go to state 82
    save_const  go to state 83


state 99

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   50 additive_expression: additive_expression '-' . term "action_sub"
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var         go to state 113
    term        go to state 117
    factor      go to state 79
    call        go to state 80
    push_id     go to state 82
    save_const  go to state 83


state 100

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   52 term: term '*' . factor "action_mult"
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var         go to state 113
    factor      go to state 118
    call        go to state 80
    push_id     go to state 82
    save_const  go to state 83


state 101

   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   53 term: term '/' . factor "action_div"
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    var         go to state 113
    factor      go to state 119
    call        go to state 80
    push_id     go to state 82
    save_const  go to state 83


state 102

   17 compound_stmt: '{' start_scope local_declarations statement_list end_scope '}' .

    $default  reduce using rule 17 (compound_stmt)


state 103

   44 var: push_id ID .  [';', ']', ')', ',', '=', '<', "action_lt", "==", "action_eq", '+', "action_add", '-', "action_sub", '*', "action_mult", '/', "action_div"]
   45    | push_id ID . '[' expression ']' "action_index_addr"
   60 call: push_id ID . '(' args ')' "action_call_fun"

    '['  shift, and go to state 120
    '('  shift, and go to state 121

    $default  reduce using rule 44 (var)


state 104

   58 factor: save_const NUM .

    $default  reduce using rule 58 (factor)


state 105

    6 var_declaration: declare type_specifier declare_id . ID ';'
    7                | declare type_specifier declare_id . ID declare_arr '[' declare_size NUM ']' ';'

    ID  shift, and go to state 122


state 106

   55 factor: '(' expression ')' .

    $default  reduce using rule 55 (factor)


state 107

   31 selection_stmt: "if" '(' expression . ')' save statement "endif" "action_if"
   32               | "if" '(' expression . ')' save statement save "else" label statement "endif" "action_ifelse"

    ')'  shift, and go to state 123


state 108

   33 iteration_stmt: "while" '(' expression . ')' statement "action_while_loop"

    ')'  shift, and go to state 124


state 109

   35 return_stmt: "return" expression ';' .

    $default  reduce using rule 35 (return_stmt)


state 110

   36 switch_stmt: "switch" '(' expression . ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 125


state 111

   59 call: "output" '(' expression . ')' "action_output"

    ')'  shift, and go to state 126


state 112

   42 expression: var '=' expression .

    $default  reduce using rule 42 (expression)


state 113

   56 factor: var .

    $default  reduce using rule 56 (factor)


state 114

   46 simple_expression: additive_expression '<' additive_expression . "action_lt"
   49 additive_expression: additive_expression . '+' term "action_add"
   50                    | additive_expression . '-' term "action_sub"

    "action_lt"  shift, and go to state 127
    '+'          shift, and go to state 98
    '-'          shift, and go to state 99


state 115

   47 simple_expression: additive_expression "==" additive_expression . "action_eq"
   49 additive_expression: additive_expression . '+' term "action_add"
   50                    | additive_expression . '-' term "action_sub"

    "action_eq"  shift, and go to state 128
    '+'          shift, and go to state 98
    '-'          shift, and go to state 99


state 116

   49 additive_expression: additive_expression '+' term . "action_add"
   52 term: term . '*' factor "action_mult"
   53     | term . '/' factor "action_div"

    "action_add"  shift, and go to state 129
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101


state 117

   50 additive_expression: additive_expression '-' term . "action_sub"
   52 term: term . '*' factor "action_mult"
   53     | term . '/' factor "action_div"

    "action_sub"  shift, and go to state 130
    '*'           shift, and go to state 100
    '/'           shift, and go to state 101


state 118

   52 term: term '*' factor . "action_mult"

    "action_mult"  shift, and go to state 131


state 119

   53 term: term '/' factor . "action_div"

    "action_div"  shift, and go to state 132


state 120

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   45    | push_id ID '[' . expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 133
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 121

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   60     | push_id ID '(' . args ')' "action_call_fun"
   61 args: . arg_list
   62     | .  [')']
   63 arg_list: . arg_list ',' expression
   64         | . expression
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    $default  reduce using rule 62 (args)

    expression           go to state 134
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    args                 go to state 135
    arg_list             go to state 136
    push_id              go to state 82
    save_const           go to state 83


state 122

    6 var_declaration: declare type_specifier declare_id ID . ';'
    7                | declare type_specifier declare_id ID . declare_arr '[' declare_size NUM ']' ';'
   73 declare_arr: . "action_declare_arr"

    ';'                   shift, and go to state 19
    "action_declare_arr"  shift, and go to state 20

    declare_arr  go to state 22


state 123

   31 selection_stmt: "if" '(' expression ')' . save statement "endif" "action_if"
   32               | "if" '(' expression ')' . save statement save "else" label statement "endif" "action_ifelse"
   69 save: . "action_save"

    "action_save"  shift, and go to state 137

    save  go to state 138


state 124

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   33               | "while" '(' expression ')' . statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    compound_stmt        go to state 67
    statement            go to state 139
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 125

   36 switch_stmt: "switch" '(' expression ')' . '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 140


state 126

   59 call: "output" '(' expression ')' . "action_output"

    "action_output"  shift, and go to state 141


state 127

   46 simple_expression: additive_expression '<' additive_expression "action_lt" .

    $default  reduce using rule 46 (simple_expression)


state 128

   47 simple_expression: additive_expression "==" additive_expression "action_eq" .

    $default  reduce using rule 47 (simple_expression)


state 129

   49 additive_expression: additive_expression '+' term "action_add" .

    $default  reduce using rule 49 (additive_expression)


state 130

   50 additive_expression: additive_expression '-' term "action_sub" .

    $default  reduce using rule 50 (additive_expression)


state 131

   52 term: term '*' factor "action_mult" .

    $default  reduce using rule 52 (term)


state 132

   53 term: term '/' factor "action_div" .

    $default  reduce using rule 53 (term)


state 133

   45 var: push_id ID '[' expression . ']' "action_index_addr"

    ']'  shift, and go to state 142


state 134

   64 arg_list: expression .

    $default  reduce using rule 64 (arg_list)


state 135

   60 call: push_id ID '(' args . ')' "action_call_fun"

    ')'  shift, and go to state 143


state 136

   61 args: arg_list .  [')']
   63 arg_list: arg_list . ',' expression

    ','  shift, and go to state 144

    $default  reduce using rule 61 (args)


state 137

   69 save: "action_save" .

    $default  reduce using rule 69 (save)


state 138

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   31               | "if" '(' expression ')' save . statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   32               | "if" '(' expression ')' save . statement save "else" label statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    compound_stmt        go to state 67
    statement            go to state 145
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 139

   33 iteration_stmt: "while" '(' expression ')' statement . "action_while_loop"

    "action_while_loop"  shift, and go to state 146


state 140

   36 switch_stmt: "switch" '(' expression ')' '{' . case_stmts default_stmt '}'
   37 case_stmts: . case_stmts case_stmt
   38           | .

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 147


state 141

   59 call: "output" '(' expression ')' "action_output" .

    $default  reduce using rule 59 (call)


state 142

   45 var: push_id ID '[' expression ']' . "action_index_addr"

    "action_index_addr"  shift, and go to state 148


state 143

   60 call: push_id ID '(' args ')' . "action_call_fun"

    "action_call_fun"  shift, and go to state 149


state 144

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   63 arg_list: arg_list ',' . expression
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    '('                  shift, and go to state 58
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    expression           go to state 150
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 145

   31 selection_stmt: "if" '(' expression ')' save statement . "endif" "action_if"
   32               | "if" '(' expression ')' save statement . save "else" label statement "endif" "action_ifelse"
   69 save: . "action_save"

    "endif"        shift, and go to state 151
    "action_save"  shift, and go to state 137

    save  go to state 152


state 146

   33 iteration_stmt: "while" '(' expression ')' statement "action_while_loop" .

    $default  reduce using rule 33 (iteration_stmt)


state 147

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts . default_stmt '}'
   37 case_stmts: case_stmts . case_stmt
   39 case_stmt: . "case" save_const NUM ':' statement_list
   40 default_stmt: . "default" ':' statement_list
   41             | .  ['}']

    "case"     shift, and go to state 153
    "default"  shift, and go to state 154

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 155
    default_stmt  go to state 156


state 148

   45 var: push_id ID '[' expression ']' "action_index_addr" .

    $default  reduce using rule 45 (var)


state 149

   60 call: push_id ID '(' args ')' "action_call_fun" .

    $default  reduce using rule 60 (call)


state 150

   63 arg_list: arg_list ',' expression .

    $default  reduce using rule 63 (arg_list)


state 151

   31 selection_stmt: "if" '(' expression ')' save statement "endif" . "action_if"

    "action_if"  shift, and go to state 157


state 152

   32 selection_stmt: "if" '(' expression ')' save statement save . "else" label statement "endif" "action_ifelse"

    "else"  shift, and go to state 158


state 153

   39 case_stmt: "case" . save_const NUM ':' statement_list
   68 save_const: . "action_save_const"

    "action_save_const"  shift, and go to state 66

    save_const  go to state 159


state 154

   40 default_stmt: "default" . ':' statement_list

    ':'  shift, and go to state 160


state 155

   37 case_stmts: case_stmts case_stmt .

    $default  reduce using rule 37 (case_stmts)


state 156

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt . '}'

    '}'  shift, and go to state 161


state 157

   31 selection_stmt: "if" '(' expression ')' save statement "endif" "action_if" .

    $default  reduce using rule 31 (selection_stmt)


state 158

   32 selection_stmt: "if" '(' expression ')' save statement save "else" . label statement "endif" "action_ifelse"
   70 label: . "action_label"

    "action_label"  shift, and go to state 162

    label  go to state 163


state 159

   39 case_stmt: "case" save_const . NUM ':' statement_list

    NUM  shift, and go to state 164


state 160

   20 statement_list: . statement_list statement
   21               | .
   40 default_stmt: "default" ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 165


state 161

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' .

    $default  reduce using rule 36 (switch_stmt)


state 162

   70 label: "action_label" .

    $default  reduce using rule 70 (label)


state 163

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   32               | "if" '(' expression ')' save statement save "else" label . statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    compound_stmt        go to state 67
    statement            go to state 166
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 164

   39 case_stmt: "case" save_const NUM . ':' statement_list

    ':'  shift, and go to state 167


state 165

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list .  ['}']
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 67
    statement            go to state 68
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 166

   32 selection_stmt: "if" '(' expression ')' save statement save "else" label statement . "endif" "action_ifelse"

    "endif"  shift, and go to state 168


state 167

   20 statement_list: . statement_list statement
   21               | .
   39 case_stmt: "case" save_const NUM ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 169


state 168

   32 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" . "action_ifelse"

    "action_ifelse"  shift, and go to state 170


state 169

   17 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' save statement "endif" "action_if"
   32               | . "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse"
   33 iteration_stmt: . "while" '(' expression ')' statement "action_while_loop"
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" save_const NUM ':' statement_list .  ['}', "case", "default"]
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . push_id ID
   45    | . push_id ID '[' expression ']' "action_index_addr"
   46 simple_expression: . additive_expression '<' additive_expression "action_lt"
   47                  | . additive_expression "==" additive_expression "action_eq"
   48                  | . additive_expression
   49 additive_expression: . additive_expression '+' term "action_add"
   50                    | . additive_expression '-' term "action_sub"
   51                    | . term
   52 term: . term '*' factor "action_mult"
   53     | . term '/' factor "action_div"
   54     | . factor
   55 factor: . '(' expression ')'
   56       | . var
   57       | . call
   58       | . save_const NUM
   59 call: . "output" '(' expression ')' "action_output"
   60     | . push_id ID '(' args ')' "action_call_fun"
   67 push_id: . "action_push_id"
   68 save_const: . "action_save_const"

    ';'                  shift, and go to state 57
    '('                  shift, and go to state 58
    '{'                  shift, and go to state 40
    "break"              shift, and go to state 59
    "if"                 shift, and go to state 60
    "while"              shift, and go to state 61
    "return"             shift, and go to state 62
    "switch"             shift, and go to state 63
    "output"             shift, and go to state 64
    "action_push_id"     shift, and go to state 65
    "action_save_const"  shift, and go to state 66

    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 67
    statement            go to state 68
    expression_stmt      go to state 69
    selection_stmt       go to state 70
    iteration_stmt       go to state 71
    return_stmt          go to state 72
    switch_stmt          go to state 73
    expression           go to state 74
    var                  go to state 75
    simple_expression    go to state 76
    additive_expression  go to state 77
    term                 go to state 78
    factor               go to state 79
    call                 go to state 80
    push_id              go to state 82
    save_const           go to state 83


state 170

   32 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" "action_ifelse" .

    $default  reduce using rule 32 (selection_stmt)
