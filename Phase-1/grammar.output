Grammar

    0 $accept: program $end

    1 program: start_scope declaration_list end_scope

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | arr_declaration
    6            | fun_declaration

    7 var_declaration: declare_type type_specifier declare_id ID ';'

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr

    9 type_specifier: "int"
   10               | "void"

   11 fun_declaration: declare_type type_specifier declare_id ID '(' params ')' declare_func compound_stmt

   12 params: param_list
   13       | "void"

   14 param_list: param_list ',' param
   15           | param

   16 param: type_specifier ID
   17      | type_specifier ID '[' ']'

   18 compound_stmt: '{' start_scope local_declarations statement_list end_scope '}'

   19 local_declarations: local_declarations var_declaration
   20                   | local_declarations arr_declaration
   21                   | /* empty */

   22 statement_list: statement_list statement
   23               | /* empty */

   24 statement: expression_stmt
   25          | compound_stmt
   26          | selection_stmt
   27          | iteration_stmt
   28          | return_stmt
   29          | switch_stmt

   30 expression_stmt: expression ';'
   31                | "break" ';'
   32                | ';'

   33 selection_stmt: "if" '(' expression ')' save statement "endif" if_block
   34               | "if" '(' expression ')' save statement save "else" label statement "endif" ifelse

   35 iteration_stmt: "while" '(' expression ')' statement while_loop

   36 return_stmt: "return" ';'
   37            | "return" expression ';'

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'

   39 case_stmts: case_stmts case_stmt
   40           | /* empty */

   41 case_stmt: "case" save_const NUM ':' save statement_list

   42 default_stmt: "default" ':' statement_list
   43             | /* empty */

   44 expression: var '=' expression assign
   45           | simple_expression

   46 var: push_id ID
   47    | push_id ID '[' expression ']' index_addr

   48 simple_expression: additive_expression '<' additive_expression lt
   49                  | additive_expression "==" additive_expression eq
   50                  | additive_expression

   51 additive_expression: additive_expression '+' term add
   52                    | additive_expression '-' term sub
   53                    | term

   54 term: term '*' factor mult
   55     | term '/' factor div
   56     | factor

   57 factor: '(' expression ')'
   58       | var
   59       | call
   60       | save_const NUM

   61 call: "output" '(' expression ')' output
   62     | push_id ID '(' args ')' call_fun

   63 args: arg_list
   64     | /* empty */

   65 arg_list: arg_list ',' expression
   66         | expression

   67 push_id: /* empty */

   68 save_const: /* empty */

   69 save: /* empty */

   70 label: /* empty */

   71 lt: /* empty */

   72 add: /* empty */

   73 div: /* empty */

   74 eq: /* empty */

   75 mult: /* empty */

   76 sub: /* empty */

   77 assign: /* empty */

   78 output: /* empty */

   79 start_scope: /* empty */

   80 end_scope: /* empty */

   81 ifelse: /* empty */

   82 if_block: /* empty */

   83 while_loop: /* empty */

   84 index_addr: /* empty */

   85 call_fun: /* empty */

   86 declare_id: /* empty */

   87 declare_type: /* empty */

   88 declare_size: /* empty */

   89 declare_arr: /* empty */

   90 declare_func: /* empty */


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 33 34 35 38 57 61 62
')' (41) 11 33 34 35 38 57 61 62
'*' (42) 54
'+' (43) 51
',' (44) 14 65
'-' (45) 52
'/' (47) 55
':' (58) 41 42
';' (59) 7 8 30 31 32 36 37
'<' (60) 48
'=' (61) 44
'[' (91) 8 17 47
']' (93) 8 17 47
'{' (123) 18 38
'}' (125) 18 38
error (256)
NUM (258) 8 41 60
ID (259) 7 8 11 16 17 46 47 62
"int" (260) 9
"void" (261) 10 13
"break" (262) 31
"if" (263) 33 34
"endif" (264) 33 34
"else" (265) 34
"while" (266) 35
"return" (267) 36 37
"switch" (268) 38
"case" (269) 41
"default" (270) 42
"==" (271) 49
"output" (272) 61


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
declaration_list (35)
    on left: 2 3, on right: 1 2
declaration (36)
    on left: 4 5 6, on right: 2 3
var_declaration (37)
    on left: 7, on right: 4 19
arr_declaration (38)
    on left: 8, on right: 5 20
type_specifier (39)
    on left: 9 10, on right: 7 8 11 16 17
fun_declaration (40)
    on left: 11, on right: 6
params (41)
    on left: 12 13, on right: 11
param_list (42)
    on left: 14 15, on right: 12 14
param (43)
    on left: 16 17, on right: 14 15
compound_stmt (44)
    on left: 18, on right: 11 25
local_declarations (45)
    on left: 19 20 21, on right: 18 19 20
statement_list (46)
    on left: 22 23, on right: 18 22 41 42
statement (47)
    on left: 24 25 26 27 28 29, on right: 22 33 34 35
expression_stmt (48)
    on left: 30 31 32, on right: 24
selection_stmt (49)
    on left: 33 34, on right: 26
iteration_stmt (50)
    on left: 35, on right: 27
return_stmt (51)
    on left: 36 37, on right: 28
switch_stmt (52)
    on left: 38, on right: 29
case_stmts (53)
    on left: 39 40, on right: 38 39
case_stmt (54)
    on left: 41, on right: 39
default_stmt (55)
    on left: 42 43, on right: 38
expression (56)
    on left: 44 45, on right: 30 33 34 35 37 38 44 47 57 61 65 66
var (57)
    on left: 46 47, on right: 44 58
simple_expression (58)
    on left: 48 49 50, on right: 45
additive_expression (59)
    on left: 51 52 53, on right: 48 49 50 51 52
term (60)
    on left: 54 55 56, on right: 51 52 53 54 55
factor (61)
    on left: 57 58 59 60, on right: 54 55 56
call (62)
    on left: 61 62, on right: 59
args (63)
    on left: 63 64, on right: 62
arg_list (64)
    on left: 65 66, on right: 63 65
push_id (65)
    on left: 67, on right: 46 47 62
save_const (66)
    on left: 68, on right: 41 60
save (67)
    on left: 69, on right: 33 34 41
label (68)
    on left: 70, on right: 34
lt (69)
    on left: 71, on right: 48
add (70)
    on left: 72, on right: 51
div (71)
    on left: 73, on right: 55
eq (72)
    on left: 74, on right: 49
mult (73)
    on left: 75, on right: 54
sub (74)
    on left: 76, on right: 52
assign (75)
    on left: 77, on right: 44
output (76)
    on left: 78, on right: 61
start_scope (77)
    on left: 79, on right: 1 18
end_scope (78)
    on left: 80, on right: 1 18
ifelse (79)
    on left: 81, on right: 34
if_block (80)
    on left: 82, on right: 33
while_loop (81)
    on left: 83, on right: 35
index_addr (82)
    on left: 84, on right: 47
call_fun (83)
    on left: 85, on right: 62
declare_id (84)
    on left: 86, on right: 7 8 11
declare_type (85)
    on left: 87, on right: 7 8 11
declare_size (86)
    on left: 88, on right: 8
declare_arr (87)
    on left: 89, on right: 8
declare_func (88)
    on left: 90, on right: 11


state 0

    0 $accept: . program $end
    1 program: . start_scope declaration_list end_scope
   79 start_scope: .

    $default  reduce using rule 79 (start_scope)

    program      go to state 1
    start_scope  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: start_scope . declaration_list end_scope
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . arr_declaration
    6            | . fun_declaration
    7 var_declaration: . declare_type type_specifier declare_id ID ';'
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: . declare_type type_specifier declare_id ID '(' params ')' declare_func compound_stmt
   87 declare_type: .

    $default  reduce using rule 87 (declare_type)

    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    arr_declaration   go to state 7
    fun_declaration   go to state 8
    declare_type      go to state 9


state 3

    0 $accept: program $end .

    $default  accept


state 4

    1 program: start_scope declaration_list . end_scope
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . arr_declaration
    6            | . fun_declaration
    7 var_declaration: . declare_type type_specifier declare_id ID ';'
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: . declare_type type_specifier declare_id ID '(' params ')' declare_func compound_stmt
   80 end_scope: .  [$end]
   87 declare_type: .  ["int", "void"]

    $end      reduce using rule 80 (end_scope)
    $default  reduce using rule 87 (declare_type)

    declaration      go to state 10
    var_declaration  go to state 6
    arr_declaration  go to state 7
    fun_declaration  go to state 8
    end_scope        go to state 11
    declare_type     go to state 9


state 5

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    5 declaration: arr_declaration .

    $default  reduce using rule 5 (declaration)


state 8

    6 declaration: fun_declaration .

    $default  reduce using rule 6 (declaration)


state 9

    7 var_declaration: declare_type . type_specifier declare_id ID ';'
    8 arr_declaration: declare_type . type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
    9 type_specifier: . "int"
   10               | . "void"
   11 fun_declaration: declare_type . type_specifier declare_id ID '(' params ')' declare_func compound_stmt

    "int"   shift, and go to state 12
    "void"  shift, and go to state 13

    type_specifier  go to state 14


state 10

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 11

    1 program: start_scope declaration_list end_scope .

    $default  reduce using rule 1 (program)


state 12

    9 type_specifier: "int" .

    $default  reduce using rule 9 (type_specifier)


state 13

   10 type_specifier: "void" .

    $default  reduce using rule 10 (type_specifier)


state 14

    7 var_declaration: declare_type type_specifier . declare_id ID ';'
    8 arr_declaration: declare_type type_specifier . declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier . declare_id ID '(' params ')' declare_func compound_stmt
   86 declare_id: .

    $default  reduce using rule 86 (declare_id)

    declare_id  go to state 15


state 15

    7 var_declaration: declare_type type_specifier declare_id . ID ';'
    8 arr_declaration: declare_type type_specifier declare_id . ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier declare_id . ID '(' params ')' declare_func compound_stmt

    ID  shift, and go to state 16


state 16

    7 var_declaration: declare_type type_specifier declare_id ID . ';'
    8 arr_declaration: declare_type type_specifier declare_id ID . '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier declare_id ID . '(' params ')' declare_func compound_stmt

    ';'  shift, and go to state 17
    '['  shift, and go to state 18
    '('  shift, and go to state 19


state 17

    7 var_declaration: declare_type type_specifier declare_id ID ';' .

    $default  reduce using rule 7 (var_declaration)


state 18

    8 arr_declaration: declare_type type_specifier declare_id ID '[' . declare_size NUM ']' ';' declare_arr
   88 declare_size: .

    $default  reduce using rule 88 (declare_size)

    declare_size  go to state 20


state 19

    9 type_specifier: . "int"
   10               | . "void"
   11 fun_declaration: declare_type type_specifier declare_id ID '(' . params ')' declare_func compound_stmt
   12 params: . param_list
   13       | . "void"
   14 param_list: . param_list ',' param
   15           | . param
   16 param: . type_specifier ID
   17      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 12
    "void"  shift, and go to state 21

    type_specifier  go to state 22
    params          go to state 23
    param_list      go to state 24
    param           go to state 25


state 20

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size . NUM ']' ';' declare_arr

    NUM  shift, and go to state 26


state 21

   10 type_specifier: "void" .  [ID]
   13 params: "void" .  [')']

    ')'       reduce using rule 13 (params)
    $default  reduce using rule 10 (type_specifier)


state 22

   16 param: type_specifier . ID
   17      | type_specifier . ID '[' ']'

    ID  shift, and go to state 27


state 23

   11 fun_declaration: declare_type type_specifier declare_id ID '(' params . ')' declare_func compound_stmt

    ')'  shift, and go to state 28


state 24

   12 params: param_list .  [')']
   14 param_list: param_list . ',' param

    ','  shift, and go to state 29

    $default  reduce using rule 12 (params)


state 25

   15 param_list: param .

    $default  reduce using rule 15 (param_list)


state 26

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM . ']' ';' declare_arr

    ']'  shift, and go to state 30


state 27

   16 param: type_specifier ID .  [')', ',']
   17      | type_specifier ID . '[' ']'

    '['  shift, and go to state 31

    $default  reduce using rule 16 (param)


state 28

   11 fun_declaration: declare_type type_specifier declare_id ID '(' params ')' . declare_func compound_stmt
   90 declare_func: .

    $default  reduce using rule 90 (declare_func)

    declare_func  go to state 32


state 29

    9 type_specifier: . "int"
   10               | . "void"
   14 param_list: param_list ',' . param
   16 param: . type_specifier ID
   17      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 12
    "void"  shift, and go to state 13

    type_specifier  go to state 22
    param           go to state 33


state 30

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' . ';' declare_arr

    ';'  shift, and go to state 34


state 31

   17 param: type_specifier ID '[' . ']'

    ']'  shift, and go to state 35


state 32

   11 fun_declaration: declare_type type_specifier declare_id ID '(' params ')' declare_func . compound_stmt
   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'

    '{'  shift, and go to state 36

    compound_stmt  go to state 37


state 33

   14 param_list: param_list ',' param .

    $default  reduce using rule 14 (param_list)


state 34

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' . declare_arr
   89 declare_arr: .

    $default  reduce using rule 89 (declare_arr)

    declare_arr  go to state 38


state 35

   17 param: type_specifier ID '[' ']' .

    $default  reduce using rule 17 (param)


state 36

   18 compound_stmt: '{' . start_scope local_declarations statement_list end_scope '}'
   79 start_scope: .

    $default  reduce using rule 79 (start_scope)

    start_scope  go to state 39


state 37

   11 fun_declaration: declare_type type_specifier declare_id ID '(' params ')' declare_func compound_stmt .

    $default  reduce using rule 11 (fun_declaration)


state 38

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr .

    $default  reduce using rule 8 (arr_declaration)


state 39

   18 compound_stmt: '{' start_scope . local_declarations statement_list end_scope '}'
   19 local_declarations: . local_declarations var_declaration
   20                   | . local_declarations arr_declaration
   21                   | .

    $default  reduce using rule 21 (local_declarations)

    local_declarations  go to state 40


state 40

    7 var_declaration: . declare_type type_specifier declare_id ID ';'
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   18 compound_stmt: '{' start_scope local_declarations . statement_list end_scope '}'
   19 local_declarations: local_declarations . var_declaration
   20                   | local_declarations . arr_declaration
   22 statement_list: . statement_list statement
   23               | .  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]
   87 declare_type: .  ["int", "void"]

    "int"     reduce using rule 87 (declare_type)
    "void"    reduce using rule 87 (declare_type)
    $default  reduce using rule 23 (statement_list)

    var_declaration  go to state 41
    arr_declaration  go to state 42
    statement_list   go to state 43
    declare_type     go to state 44


state 41

   19 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 19 (local_declarations)


state 42

   20 local_declarations: local_declarations arr_declaration .

    $default  reduce using rule 20 (local_declarations)


state 43

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   18              | '{' start_scope local_declarations statement_list . end_scope '}'
   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   80 end_scope: .  ['}']

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    '}'       reduce using rule 80 (end_scope)
    $default  reduce using rule 67 (push_id)

    compound_stmt        go to state 53
    statement            go to state 54
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68
    end_scope            go to state 69


state 44

    7 var_declaration: declare_type . type_specifier declare_id ID ';'
    8 arr_declaration: declare_type . type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
    9 type_specifier: . "int"
   10               | . "void"

    "int"   shift, and go to state 12
    "void"  shift, and go to state 13

    type_specifier  go to state 70


state 45

   32 expression_stmt: ';' .

    $default  reduce using rule 32 (expression_stmt)


state 46

   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   57       | '(' . expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 71
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 47

   31 expression_stmt: "break" . ';'

    ';'  shift, and go to state 72


state 48

   33 selection_stmt: "if" . '(' expression ')' save statement "endif" if_block
   34               | "if" . '(' expression ')' save statement save "else" label statement "endif" ifelse

    '('  shift, and go to state 73


state 49

   35 iteration_stmt: "while" . '(' expression ')' statement while_loop

    '('  shift, and go to state 74


state 50

   36 return_stmt: "return" . ';'
   37            | "return" . expression ';'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 75
    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 76
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 51

   38 switch_stmt: "switch" . '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 77


state 52

   61 call: "output" . '(' expression ')' output

    '('  shift, and go to state 78


state 53

   25 statement: compound_stmt .

    $default  reduce using rule 25 (statement)


state 54

   22 statement_list: statement_list statement .

    $default  reduce using rule 22 (statement_list)


state 55

   24 statement: expression_stmt .

    $default  reduce using rule 24 (statement)


state 56

   26 statement: selection_stmt .

    $default  reduce using rule 26 (statement)


state 57

   27 statement: iteration_stmt .

    $default  reduce using rule 27 (statement)


state 58

   28 statement: return_stmt .

    $default  reduce using rule 28 (statement)


state 59

   29 statement: switch_stmt .

    $default  reduce using rule 29 (statement)


state 60

   30 expression_stmt: expression . ';'

    ';'  shift, and go to state 79


state 61

   44 expression: var . '=' expression assign
   58 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 80

    $default  reduce using rule 58 (factor)


state 62

   45 expression: simple_expression .

    $default  reduce using rule 45 (expression)


state 63

   48 simple_expression: additive_expression . '<' additive_expression lt
   49                  | additive_expression . "==" additive_expression eq
   50                  | additive_expression .  [';', ']', ')', ',']
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub

    '<'   shift, and go to state 81
    "=="  shift, and go to state 82
    '+'   shift, and go to state 83
    '-'   shift, and go to state 84

    $default  reduce using rule 50 (simple_expression)


state 64

   53 additive_expression: term .  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term . '*' factor mult
   55     | term . '/' factor div

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86

    $default  reduce using rule 53 (additive_expression)


state 65

   56 term: factor .

    $default  reduce using rule 56 (term)


state 66

   59 factor: call .

    $default  reduce using rule 59 (factor)


state 67

   46 var: push_id . ID
   47    | push_id . ID '[' expression ']' index_addr
   62 call: push_id . ID '(' args ')' call_fun

    ID  shift, and go to state 87


state 68

   60 factor: save_const . NUM

    NUM  shift, and go to state 88


state 69

   18 compound_stmt: '{' start_scope local_declarations statement_list end_scope . '}'

    '}'  shift, and go to state 89


state 70

    7 var_declaration: declare_type type_specifier . declare_id ID ';'
    8 arr_declaration: declare_type type_specifier . declare_id ID '[' declare_size NUM ']' ';' declare_arr
   86 declare_id: .

    $default  reduce using rule 86 (declare_id)

    declare_id  go to state 90


state 71

   57 factor: '(' expression . ')'

    ')'  shift, and go to state 91


state 72

   31 expression_stmt: "break" ';' .

    $default  reduce using rule 31 (expression_stmt)


state 73

   33 selection_stmt: "if" '(' . expression ')' save statement "endif" if_block
   34               | "if" '(' . expression ')' save statement save "else" label statement "endif" ifelse
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 92
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 74

   35 iteration_stmt: "while" '(' . expression ')' statement while_loop
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 93
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 75

   36 return_stmt: "return" ';' .

    $default  reduce using rule 36 (return_stmt)


state 76

   37 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 94


state 77

   38 switch_stmt: "switch" '(' . expression ')' '{' case_stmts default_stmt '}'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 95
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 78

   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   61     | "output" '(' . expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 96
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 79

   30 expression_stmt: expression ';' .

    $default  reduce using rule 30 (expression_stmt)


state 80

   44 expression: . var '=' expression assign
   44           | var '=' . expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 97
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 81

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: additive_expression '<' . additive_expression lt
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var                  go to state 98
    additive_expression  go to state 99
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 82

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   49 simple_expression: additive_expression "==" . additive_expression eq
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var                  go to state 98
    additive_expression  go to state 100
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 83

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   51 additive_expression: additive_expression '+' . term add
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 98
    term        go to state 101
    factor      go to state 65
    call        go to state 66
    push_id     go to state 67
    save_const  go to state 68


state 84

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   52 additive_expression: additive_expression '-' . term sub
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 98
    term        go to state 102
    factor      go to state 65
    call        go to state 66
    push_id     go to state 67
    save_const  go to state 68


state 85

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   54 term: term '*' . factor mult
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 98
    factor      go to state 103
    call        go to state 66
    push_id     go to state 67
    save_const  go to state 68


state 86

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   55 term: term '/' . factor div
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 98
    factor      go to state 104
    call        go to state 66
    push_id     go to state 67
    save_const  go to state 68


state 87

   46 var: push_id ID .  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   47    | push_id ID . '[' expression ']' index_addr
   62 call: push_id ID . '(' args ')' call_fun

    '['  shift, and go to state 105
    '('  shift, and go to state 106

    $default  reduce using rule 46 (var)


state 88

   60 factor: save_const NUM .

    $default  reduce using rule 60 (factor)


state 89

   18 compound_stmt: '{' start_scope local_declarations statement_list end_scope '}' .

    $default  reduce using rule 18 (compound_stmt)


state 90

    7 var_declaration: declare_type type_specifier declare_id . ID ';'
    8 arr_declaration: declare_type type_specifier declare_id . ID '[' declare_size NUM ']' ';' declare_arr

    ID  shift, and go to state 107


state 91

   57 factor: '(' expression ')' .

    $default  reduce using rule 57 (factor)


state 92

   33 selection_stmt: "if" '(' expression . ')' save statement "endif" if_block
   34               | "if" '(' expression . ')' save statement save "else" label statement "endif" ifelse

    ')'  shift, and go to state 108


state 93

   35 iteration_stmt: "while" '(' expression . ')' statement while_loop

    ')'  shift, and go to state 109


state 94

   37 return_stmt: "return" expression ';' .

    $default  reduce using rule 37 (return_stmt)


state 95

   38 switch_stmt: "switch" '(' expression . ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 110


state 96

   61 call: "output" '(' expression . ')' output

    ')'  shift, and go to state 111


state 97

   44 expression: var '=' expression . assign
   77 assign: .

    $default  reduce using rule 77 (assign)

    assign  go to state 112


state 98

   58 factor: var .

    $default  reduce using rule 58 (factor)


state 99

   48 simple_expression: additive_expression '<' additive_expression . lt
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub
   71 lt: .  [';', ']', ')', ',']

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84

    $default  reduce using rule 71 (lt)

    lt  go to state 113


state 100

   49 simple_expression: additive_expression "==" additive_expression . eq
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub
   74 eq: .  [';', ']', ')', ',']

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84

    $default  reduce using rule 74 (eq)

    eq  go to state 114


state 101

   51 additive_expression: additive_expression '+' term . add
   54 term: term . '*' factor mult
   55     | term . '/' factor div
   72 add: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86

    $default  reduce using rule 72 (add)

    add  go to state 115


state 102

   52 additive_expression: additive_expression '-' term . sub
   54 term: term . '*' factor mult
   55     | term . '/' factor div
   76 sub: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86

    $default  reduce using rule 76 (sub)

    sub  go to state 116


state 103

   54 term: term '*' factor . mult
   75 mult: .

    $default  reduce using rule 75 (mult)

    mult  go to state 117


state 104

   55 term: term '/' factor . div
   73 div: .

    $default  reduce using rule 73 (div)

    div  go to state 118


state 105

   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   47    | push_id ID '[' . expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 119
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 106

   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   62     | push_id ID '(' . args ')' call_fun
   63 args: . arg_list
   64     | .  [')']
   65 arg_list: . arg_list ',' expression
   66         | . expression
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 64 (args)

    expression           go to state 120
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    args                 go to state 121
    arg_list             go to state 122
    push_id              go to state 67
    save_const           go to state 68


state 107

    7 var_declaration: declare_type type_specifier declare_id ID . ';'
    8 arr_declaration: declare_type type_specifier declare_id ID . '[' declare_size NUM ']' ';' declare_arr

    ';'  shift, and go to state 17
    '['  shift, and go to state 18


state 108

   33 selection_stmt: "if" '(' expression ')' . save statement "endif" if_block
   34               | "if" '(' expression ')' . save statement save "else" label statement "endif" ifelse
   69 save: .

    $default  reduce using rule 69 (save)

    save  go to state 123


state 109

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   35               | "while" '(' expression ')' . statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    compound_stmt        go to state 53
    statement            go to state 124
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 110

   38 switch_stmt: "switch" '(' expression ')' . '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 125


state 111

   61 call: "output" '(' expression ')' . output
   78 output: .

    $default  reduce using rule 78 (output)

    output  go to state 126


state 112

   44 expression: var '=' expression assign .

    $default  reduce using rule 44 (expression)


state 113

   48 simple_expression: additive_expression '<' additive_expression lt .

    $default  reduce using rule 48 (simple_expression)


state 114

   49 simple_expression: additive_expression "==" additive_expression eq .

    $default  reduce using rule 49 (simple_expression)


state 115

   51 additive_expression: additive_expression '+' term add .

    $default  reduce using rule 51 (additive_expression)


state 116

   52 additive_expression: additive_expression '-' term sub .

    $default  reduce using rule 52 (additive_expression)


state 117

   54 term: term '*' factor mult .

    $default  reduce using rule 54 (term)


state 118

   55 term: term '/' factor div .

    $default  reduce using rule 55 (term)


state 119

   47 var: push_id ID '[' expression . ']' index_addr

    ']'  shift, and go to state 127


state 120

   66 arg_list: expression .

    $default  reduce using rule 66 (arg_list)


state 121

   62 call: push_id ID '(' args . ')' call_fun

    ')'  shift, and go to state 128


state 122

   63 args: arg_list .  [')']
   65 arg_list: arg_list . ',' expression

    ','  shift, and go to state 129

    $default  reduce using rule 63 (args)


state 123

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   33               | "if" '(' expression ')' save . statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   34               | "if" '(' expression ')' save . statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    compound_stmt        go to state 53
    statement            go to state 130
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 124

   35 iteration_stmt: "while" '(' expression ')' statement . while_loop
   83 while_loop: .

    $default  reduce using rule 83 (while_loop)

    while_loop  go to state 131


state 125

   38 switch_stmt: "switch" '(' expression ')' '{' . case_stmts default_stmt '}'
   39 case_stmts: . case_stmts case_stmt
   40           | .

    $default  reduce using rule 40 (case_stmts)

    case_stmts  go to state 132


state 126

   61 call: "output" '(' expression ')' output .

    $default  reduce using rule 61 (call)


state 127

   47 var: push_id ID '[' expression ']' . index_addr
   84 index_addr: .

    $default  reduce using rule 84 (index_addr)

    index_addr  go to state 133


state 128

   62 call: push_id ID '(' args ')' . call_fun
   85 call_fun: .

    $default  reduce using rule 85 (call_fun)

    call_fun  go to state 134


state 129

   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   65 arg_list: arg_list ',' . expression
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 46
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 135
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 130

   33 selection_stmt: "if" '(' expression ')' save statement . "endif" if_block
   34               | "if" '(' expression ')' save statement . save "else" label statement "endif" ifelse
   69 save: .  ["else"]

    "endif"  shift, and go to state 136

    $default  reduce using rule 69 (save)

    save  go to state 137


state 131

   35 iteration_stmt: "while" '(' expression ')' statement while_loop .

    $default  reduce using rule 35 (iteration_stmt)


state 132

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts . default_stmt '}'
   39 case_stmts: case_stmts . case_stmt
   41 case_stmt: . "case" save_const NUM ':' save statement_list
   42 default_stmt: . "default" ':' statement_list
   43             | .  ['}']

    "case"     shift, and go to state 138
    "default"  shift, and go to state 139

    $default  reduce using rule 43 (default_stmt)

    case_stmt     go to state 140
    default_stmt  go to state 141


state 133

   47 var: push_id ID '[' expression ']' index_addr .

    $default  reduce using rule 47 (var)


state 134

   62 call: push_id ID '(' args ')' call_fun .

    $default  reduce using rule 62 (call)


state 135

   65 arg_list: arg_list ',' expression .

    $default  reduce using rule 65 (arg_list)


state 136

   33 selection_stmt: "if" '(' expression ')' save statement "endif" . if_block
   82 if_block: .

    $default  reduce using rule 82 (if_block)

    if_block  go to state 142


state 137

   34 selection_stmt: "if" '(' expression ')' save statement save . "else" label statement "endif" ifelse

    "else"  shift, and go to state 143


state 138

   41 case_stmt: "case" . save_const NUM ':' save statement_list
   68 save_const: .

    $default  reduce using rule 68 (save_const)

    save_const  go to state 144


state 139

   42 default_stmt: "default" . ':' statement_list

    ':'  shift, and go to state 145


state 140

   39 case_stmts: case_stmts case_stmt .

    $default  reduce using rule 39 (case_stmts)


state 141

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt . '}'

    '}'  shift, and go to state 146


state 142

   33 selection_stmt: "if" '(' expression ')' save statement "endif" if_block .

    $default  reduce using rule 33 (selection_stmt)


state 143

   34 selection_stmt: "if" '(' expression ')' save statement save "else" . label statement "endif" ifelse
   70 label: .

    $default  reduce using rule 70 (label)

    label  go to state 147


state 144

   41 case_stmt: "case" save_const . NUM ':' save statement_list

    NUM  shift, and go to state 148


state 145

   22 statement_list: . statement_list statement
   23               | .
   42 default_stmt: "default" ':' . statement_list

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 149


state 146

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' .

    $default  reduce using rule 38 (switch_stmt)


state 147

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   34               | "if" '(' expression ')' save statement save "else" label . statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    compound_stmt        go to state 53
    statement            go to state 150
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 148

   41 case_stmt: "case" save_const NUM . ':' save statement_list

    ':'  shift, and go to state 151


state 149

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 default_stmt: "default" ':' statement_list .  ['}']
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 42 (default_stmt)

    compound_stmt        go to state 53
    statement            go to state 54
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68


state 150

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement . "endif" ifelse

    "endif"  shift, and go to state 152


state 151

   41 case_stmt: "case" save_const NUM ':' . save statement_list
   69 save: .

    $default  reduce using rule 69 (save)

    save  go to state 153


state 152

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" . ifelse
   81 ifelse: .

    $default  reduce using rule 81 (ifelse)

    ifelse  go to state 154


state 153

   22 statement_list: . statement_list statement
   23               | .
   41 case_stmt: "case" save_const NUM ':' save . statement_list

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 155


state 154

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" ifelse .

    $default  reduce using rule 34 (selection_stmt)


state 155

   18 compound_stmt: . '{' start_scope local_declarations statement_list end_scope '}'
   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . compound_stmt
   26          | . selection_stmt
   27          | . iteration_stmt
   28          | . return_stmt
   29          | . switch_stmt
   30 expression_stmt: . expression ';'
   31                | . "break" ';'
   32                | . ';'
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' expression ')' statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   41 case_stmt: "case" save_const NUM ':' save statement_list .  ['}', "case", "default"]
   44 expression: . var '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 45
    '('       shift, and go to state 46
    '{'       shift, and go to state 36
    "break"   shift, and go to state 47
    "if"      shift, and go to state 48
    "while"   shift, and go to state 49
    "return"  shift, and go to state 50
    "switch"  shift, and go to state 51
    "output"  shift, and go to state 52

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 41 (case_stmt)

    compound_stmt        go to state 53
    statement            go to state 54
    expression_stmt      go to state 55
    selection_stmt       go to state 56
    iteration_stmt       go to state 57
    return_stmt          go to state 58
    switch_stmt          go to state 59
    expression           go to state 60
    var                  go to state 61
    simple_expression    go to state 62
    additive_expression  go to state 63
    term                 go to state 64
    factor               go to state 65
    call                 go to state 66
    push_id              go to state 67
    save_const           go to state 68
