Grammar

    0 $accept: program $end

    1 program: save start_scope declaration_list end_scope

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | arr_declaration
    6            | fun_declaration

    7 var_declaration: declare_type type_specifier declare_id ID ';' declare_var

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr

    9 type_specifier: "int"
   10               | "void"

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope

   12 params: param_list
   13       | "void"

   14 param_list: param_list ',' param
   15           | param

   16 param: type_specifier ID
   17      | type_specifier ID '[' ']'

   18 compound_stmt: '{' local_declarations statement_list '}'

   19 local_declarations: local_declarations var_declaration
   20                   | local_declarations arr_declaration
   21                   | /* empty */

   22 statement_list: statement_list statement
   23               | /* empty */

   24 statement: expression_stmt
   25          | start_scope compound_stmt end_scope
   26          | start_scope selection_stmt end_scope
   27          | start_scope iteration_stmt end_scope
   28          | return_stmt
   29          | start_scope switch_stmt end_scope

   30 expression_stmt: expression ';'
   31                | "break" ';' break_stmt
   32                | ';'

   33 selection_stmt: "if" '(' expression ')' save statement "endif" if_block
   34               | "if" '(' expression ')' save statement save "else" label statement "endif" ifelse

   35 iteration_stmt: "while" '(' label expression ')' save statement while_loop

   36 return_stmt: "return" ';'
   37            | "return" expression ';'

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' switch_block

   39 case_stmts: case_stmts case_stmt label
   40           | /* empty */

   41 case_stmt: new_case "case" save_const NUM ':' save empty_cell statement_list

   42 default_stmt: "default" ':' statement_list
   43             | /* empty */

   44 expression: var assign_chain_inc '=' expression assign
   45           | simple_expression

   46 var: push_id ID
   47    | push_id ID '[' expression ']' index_addr

   48 simple_expression: additive_expression '<' additive_expression lt
   49                  | additive_expression "==" additive_expression eq
   50                  | additive_expression

   51 additive_expression: additive_expression '+' term add
   52                    | additive_expression '-' term sub
   53                    | term

   54 term: term '*' factor mult
   55     | term '/' factor div
   56     | factor

   57 factor: '(' expression ')'
   58       | var
   59       | call
   60       | save_const NUM

   61 call: "output" '(' expression ')' output
   62     | push_id ID '(' call_args_start args ')' call_fun

   63 args: arg_list
   64     | /* empty */

   65 arg_list: arg_list ',' new_call_arg expression
   66         | new_call_arg expression

   67 push_id: /* empty */

   68 save_const: /* empty */

   69 save: /* empty */

   70 empty_cell: /* empty */

   71 label: /* empty */

   72 lt: /* empty */

   73 add: /* empty */

   74 div: /* empty */

   75 eq: /* empty */

   76 mult: /* empty */

   77 sub: /* empty */

   78 assign: /* empty */

   79 assign_chain_inc: /* empty */

   80 output: /* empty */

   81 start_scope: /* empty */

   82 end_scope: /* empty */

   83 ifelse: /* empty */

   84 if_block: /* empty */

   85 while_loop: /* empty */

   86 switch_block: /* empty */

   87 new_case: /* empty */

   88 break_stmt: /* empty */

   89 index_addr: /* empty */

   90 call_fun: /* empty */

   91 declare_id: /* empty */

   92 declare_type: /* empty */

   93 declare_size: /* empty */

   94 declare_var: /* empty */

   95 declare_arr: /* empty */

   96 declare_func: /* empty */

   97 declare_address: /* empty */

   98 call_args_start: /* empty */

   99 new_call_arg: /* empty */


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 33 34 35 38 57 61 62
')' (41) 11 33 34 35 38 57 61 62
'*' (42) 54
'+' (43) 51
',' (44) 14 65
'-' (45) 52
'/' (47) 55
':' (58) 41 42
';' (59) 7 8 30 31 32 36 37
'<' (60) 48
'=' (61) 44
'[' (91) 8 17 47
']' (93) 8 17 47
'{' (123) 18 38
'}' (125) 18 38
error (256)
NUM (258) 8 41 60
ID (259) 7 8 11 16 17 46 47 62
"int" (260) 9
"void" (261) 10 13
"break" (262) 31
"if" (263) 33 34
"endif" (264) 33 34
"else" (265) 34
"while" (266) 35
"return" (267) 36 37
"switch" (268) 38
"case" (269) 41
"default" (270) 42
"==" (271) 49
"output" (272) 61


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
declaration_list (35)
    on left: 2 3, on right: 1 2
declaration (36)
    on left: 4 5 6, on right: 2 3
var_declaration (37)
    on left: 7, on right: 4 19
arr_declaration (38)
    on left: 8, on right: 5 20
type_specifier (39)
    on left: 9 10, on right: 7 8 11 16 17
fun_declaration (40)
    on left: 11, on right: 6
params (41)
    on left: 12 13, on right: 11
param_list (42)
    on left: 14 15, on right: 12 14
param (43)
    on left: 16 17, on right: 14 15
compound_stmt (44)
    on left: 18, on right: 11 25
local_declarations (45)
    on left: 19 20 21, on right: 18 19 20
statement_list (46)
    on left: 22 23, on right: 18 22 41 42
statement (47)
    on left: 24 25 26 27 28 29, on right: 22 33 34 35
expression_stmt (48)
    on left: 30 31 32, on right: 24
selection_stmt (49)
    on left: 33 34, on right: 26
iteration_stmt (50)
    on left: 35, on right: 27
return_stmt (51)
    on left: 36 37, on right: 28
switch_stmt (52)
    on left: 38, on right: 29
case_stmts (53)
    on left: 39 40, on right: 38 39
case_stmt (54)
    on left: 41, on right: 39
default_stmt (55)
    on left: 42 43, on right: 38
expression (56)
    on left: 44 45, on right: 30 33 34 35 37 38 44 47 57 61 65 66
var (57)
    on left: 46 47, on right: 44 58
simple_expression (58)
    on left: 48 49 50, on right: 45
additive_expression (59)
    on left: 51 52 53, on right: 48 49 50 51 52
term (60)
    on left: 54 55 56, on right: 51 52 53 54 55
factor (61)
    on left: 57 58 59 60, on right: 54 55 56
call (62)
    on left: 61 62, on right: 59
args (63)
    on left: 63 64, on right: 62
arg_list (64)
    on left: 65 66, on right: 63 65
push_id (65)
    on left: 67, on right: 46 47 62
save_const (66)
    on left: 68, on right: 41 60
save (67)
    on left: 69, on right: 1 33 34 35 41
empty_cell (68)
    on left: 70, on right: 41
label (69)
    on left: 71, on right: 34 35 39
lt (70)
    on left: 72, on right: 48
add (71)
    on left: 73, on right: 51
div (72)
    on left: 74, on right: 55
eq (73)
    on left: 75, on right: 49
mult (74)
    on left: 76, on right: 54
sub (75)
    on left: 77, on right: 52
assign (76)
    on left: 78, on right: 44
assign_chain_inc (77)
    on left: 79, on right: 44
output (78)
    on left: 80, on right: 61
start_scope (79)
    on left: 81, on right: 1 11 25 26 27 29
end_scope (80)
    on left: 82, on right: 1 11 25 26 27 29
ifelse (81)
    on left: 83, on right: 34
if_block (82)
    on left: 84, on right: 33
while_loop (83)
    on left: 85, on right: 35
switch_block (84)
    on left: 86, on right: 38
new_case (85)
    on left: 87, on right: 41
break_stmt (86)
    on left: 88, on right: 31
index_addr (87)
    on left: 89, on right: 47
call_fun (88)
    on left: 90, on right: 62
declare_id (89)
    on left: 91, on right: 7 8 11
declare_type (90)
    on left: 92, on right: 7 8 11
declare_size (91)
    on left: 93, on right: 8
declare_var (92)
    on left: 94, on right: 7
declare_arr (93)
    on left: 95, on right: 8
declare_func (94)
    on left: 96, on right: 11
declare_address (95)
    on left: 97, on right: 11
call_args_start (96)
    on left: 98, on right: 62
new_call_arg (97)
    on left: 99, on right: 65 66


state 0

    0 $accept: . program $end
    1 program: . save start_scope declaration_list end_scope
   69 save: .

    $default  reduce using rule 69 (save)

    program  go to state 1
    save     go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: save . start_scope declaration_list end_scope
   81 start_scope: .

    $default  reduce using rule 81 (start_scope)

    start_scope  go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    1 program: save start_scope . declaration_list end_scope
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . arr_declaration
    6            | . fun_declaration
    7 var_declaration: . declare_type type_specifier declare_id ID ';' declare_var
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: . declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope
   92 declare_type: .

    $default  reduce using rule 92 (declare_type)

    declaration_list  go to state 5
    declaration       go to state 6
    var_declaration   go to state 7
    arr_declaration   go to state 8
    fun_declaration   go to state 9
    declare_type      go to state 10


state 5

    1 program: save start_scope declaration_list . end_scope
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . arr_declaration
    6            | . fun_declaration
    7 var_declaration: . declare_type type_specifier declare_id ID ';' declare_var
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: . declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope
   82 end_scope: .  [$end]
   92 declare_type: .  ["int", "void"]

    $end      reduce using rule 82 (end_scope)
    $default  reduce using rule 92 (declare_type)

    declaration      go to state 11
    var_declaration  go to state 7
    arr_declaration  go to state 8
    fun_declaration  go to state 9
    end_scope        go to state 12
    declare_type     go to state 10


state 6

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 7

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 8

    5 declaration: arr_declaration .

    $default  reduce using rule 5 (declaration)


state 9

    6 declaration: fun_declaration .

    $default  reduce using rule 6 (declaration)


state 10

    7 var_declaration: declare_type . type_specifier declare_id ID ';' declare_var
    8 arr_declaration: declare_type . type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
    9 type_specifier: . "int"
   10               | . "void"
   11 fun_declaration: declare_type . type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 15


state 11

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 12

    1 program: save start_scope declaration_list end_scope .

    $default  reduce using rule 1 (program)


state 13

    9 type_specifier: "int" .

    $default  reduce using rule 9 (type_specifier)


state 14

   10 type_specifier: "void" .

    $default  reduce using rule 10 (type_specifier)


state 15

    7 var_declaration: declare_type type_specifier . declare_id ID ';' declare_var
    8 arr_declaration: declare_type type_specifier . declare_id ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier . declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope
   91 declare_id: .

    $default  reduce using rule 91 (declare_id)

    declare_id  go to state 16


state 16

    7 var_declaration: declare_type type_specifier declare_id . ID ';' declare_var
    8 arr_declaration: declare_type type_specifier declare_id . ID '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier declare_id . ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope

    ID  shift, and go to state 17


state 17

    7 var_declaration: declare_type type_specifier declare_id ID . ';' declare_var
    8 arr_declaration: declare_type type_specifier declare_id ID . '[' declare_size NUM ']' ';' declare_arr
   11 fun_declaration: declare_type type_specifier declare_id ID . declare_address start_scope '(' params ')' declare_func compound_stmt end_scope
   97 declare_address: .  ['(']

    ';'  shift, and go to state 18
    '['  shift, and go to state 19

    $default  reduce using rule 97 (declare_address)

    declare_address  go to state 20


state 18

    7 var_declaration: declare_type type_specifier declare_id ID ';' . declare_var
   94 declare_var: .

    $default  reduce using rule 94 (declare_var)

    declare_var  go to state 21


state 19

    8 arr_declaration: declare_type type_specifier declare_id ID '[' . declare_size NUM ']' ';' declare_arr
   93 declare_size: .

    $default  reduce using rule 93 (declare_size)

    declare_size  go to state 22


state 20

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address . start_scope '(' params ')' declare_func compound_stmt end_scope
   81 start_scope: .

    $default  reduce using rule 81 (start_scope)

    start_scope  go to state 23


state 21

    7 var_declaration: declare_type type_specifier declare_id ID ';' declare_var .

    $default  reduce using rule 7 (var_declaration)


state 22

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size . NUM ']' ';' declare_arr

    NUM  shift, and go to state 24


state 23

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope . '(' params ')' declare_func compound_stmt end_scope

    '('  shift, and go to state 25


state 24

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM . ']' ';' declare_arr

    ']'  shift, and go to state 26


state 25

    9 type_specifier: . "int"
   10               | . "void"
   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' . params ')' declare_func compound_stmt end_scope
   12 params: . param_list
   13       | . "void"
   14 param_list: . param_list ',' param
   15           | . param
   16 param: . type_specifier ID
   17      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 13
    "void"  shift, and go to state 27

    type_specifier  go to state 28
    params          go to state 29
    param_list      go to state 30
    param           go to state 31


state 26

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' . ';' declare_arr

    ';'  shift, and go to state 32


state 27

   10 type_specifier: "void" .  [ID]
   13 params: "void" .  [')']

    ')'       reduce using rule 13 (params)
    $default  reduce using rule 10 (type_specifier)


state 28

   16 param: type_specifier . ID
   17      | type_specifier . ID '[' ']'

    ID  shift, and go to state 33


state 29

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params . ')' declare_func compound_stmt end_scope

    ')'  shift, and go to state 34


state 30

   12 params: param_list .  [')']
   14 param_list: param_list . ',' param

    ','  shift, and go to state 35

    $default  reduce using rule 12 (params)


state 31

   15 param_list: param .

    $default  reduce using rule 15 (param_list)


state 32

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' . declare_arr
   95 declare_arr: .

    $default  reduce using rule 95 (declare_arr)

    declare_arr  go to state 36


state 33

   16 param: type_specifier ID .  [')', ',']
   17      | type_specifier ID . '[' ']'

    '['  shift, and go to state 37

    $default  reduce using rule 16 (param)


state 34

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' . declare_func compound_stmt end_scope
   96 declare_func: .

    $default  reduce using rule 96 (declare_func)

    declare_func  go to state 38


state 35

    9 type_specifier: . "int"
   10               | . "void"
   14 param_list: param_list ',' . param
   16 param: . type_specifier ID
   17      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 28
    param           go to state 39


state 36

    8 arr_declaration: declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr .

    $default  reduce using rule 8 (arr_declaration)


state 37

   17 param: type_specifier ID '[' . ']'

    ']'  shift, and go to state 40


state 38

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func . compound_stmt end_scope
   18 compound_stmt: . '{' local_declarations statement_list '}'

    '{'  shift, and go to state 41

    compound_stmt  go to state 42


state 39

   14 param_list: param_list ',' param .

    $default  reduce using rule 14 (param_list)


state 40

   17 param: type_specifier ID '[' ']' .

    $default  reduce using rule 17 (param)


state 41

   18 compound_stmt: '{' . local_declarations statement_list '}'
   19 local_declarations: . local_declarations var_declaration
   20                   | . local_declarations arr_declaration
   21                   | .

    $default  reduce using rule 21 (local_declarations)

    local_declarations  go to state 43


state 42

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt . end_scope
   82 end_scope: .

    $default  reduce using rule 82 (end_scope)

    end_scope  go to state 44


state 43

    7 var_declaration: . declare_type type_specifier declare_id ID ';' declare_var
    8 arr_declaration: . declare_type type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
   18 compound_stmt: '{' local_declarations . statement_list '}'
   19 local_declarations: local_declarations . var_declaration
   20                   | local_declarations . arr_declaration
   22 statement_list: . statement_list statement
   23               | .  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]
   92 declare_type: .  ["int", "void"]

    "int"     reduce using rule 92 (declare_type)
    "void"    reduce using rule 92 (declare_type)
    $default  reduce using rule 23 (statement_list)

    var_declaration  go to state 45
    arr_declaration  go to state 46
    statement_list   go to state 47
    declare_type     go to state 48


state 44

   11 fun_declaration: declare_type type_specifier declare_id ID declare_address start_scope '(' params ')' declare_func compound_stmt end_scope .

    $default  reduce using rule 11 (fun_declaration)


state 45

   19 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 19 (local_declarations)


state 46

   20 local_declarations: local_declarations arr_declaration .

    $default  reduce using rule 20 (local_declarations)


state 47

   18 compound_stmt: '{' local_declarations statement_list . '}'
   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    '}'       shift, and go to state 51
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 81 (start_scope)

    statement            go to state 55
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67


state 48

    7 var_declaration: declare_type . type_specifier declare_id ID ';' declare_var
    8 arr_declaration: declare_type . type_specifier declare_id ID '[' declare_size NUM ']' ';' declare_arr
    9 type_specifier: . "int"
   10               | . "void"

    "int"   shift, and go to state 13
    "void"  shift, and go to state 14

    type_specifier  go to state 68


state 49

   32 expression_stmt: ';' .

    $default  reduce using rule 32 (expression_stmt)


state 50

   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   57       | '(' . expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 69
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 51

   18 compound_stmt: '{' local_declarations statement_list '}' .

    $default  reduce using rule 18 (compound_stmt)


state 52

   31 expression_stmt: "break" . ';' break_stmt

    ';'  shift, and go to state 70


state 53

   36 return_stmt: "return" . ';'
   37            | "return" . expression ';'
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    ';'       shift, and go to state 71
    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 72
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 54

   61 call: "output" . '(' expression ')' output

    '('  shift, and go to state 73


state 55

   22 statement_list: statement_list statement .

    $default  reduce using rule 22 (statement_list)


state 56

   24 statement: expression_stmt .

    $default  reduce using rule 24 (statement)


state 57

   28 statement: return_stmt .

    $default  reduce using rule 28 (statement)


state 58

   30 expression_stmt: expression . ';'

    ';'  shift, and go to state 74


state 59

   44 expression: var . assign_chain_inc '=' expression assign
   58 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']
   79 assign_chain_inc: .  ['=']

    '='       reduce using rule 79 (assign_chain_inc)
    $default  reduce using rule 58 (factor)

    assign_chain_inc  go to state 75


state 60

   45 expression: simple_expression .

    $default  reduce using rule 45 (expression)


state 61

   48 simple_expression: additive_expression . '<' additive_expression lt
   49                  | additive_expression . "==" additive_expression eq
   50                  | additive_expression .  [';', ']', ')', ',']
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub

    '<'   shift, and go to state 76
    "=="  shift, and go to state 77
    '+'   shift, and go to state 78
    '-'   shift, and go to state 79

    $default  reduce using rule 50 (simple_expression)


state 62

   53 additive_expression: term .  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term . '*' factor mult
   55     | term . '/' factor div

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 53 (additive_expression)


state 63

   56 term: factor .

    $default  reduce using rule 56 (term)


state 64

   59 factor: call .

    $default  reduce using rule 59 (factor)


state 65

   46 var: push_id . ID
   47    | push_id . ID '[' expression ']' index_addr
   62 call: push_id . ID '(' call_args_start args ')' call_fun

    ID  shift, and go to state 82


state 66

   60 factor: save_const . NUM

    NUM  shift, and go to state 83


state 67

   18 compound_stmt: . '{' local_declarations statement_list '}'
   25 statement: start_scope . compound_stmt end_scope
   26          | start_scope . selection_stmt end_scope
   27          | start_scope . iteration_stmt end_scope
   29          | start_scope . switch_stmt end_scope
   33 selection_stmt: . "if" '(' expression ')' save statement "endif" if_block
   34               | . "if" '(' expression ')' save statement save "else" label statement "endif" ifelse
   35 iteration_stmt: . "while" '(' label expression ')' save statement while_loop
   38 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}' switch_block

    '{'       shift, and go to state 41
    "if"      shift, and go to state 84
    "while"   shift, and go to state 85
    "switch"  shift, and go to state 86

    compound_stmt   go to state 87
    selection_stmt  go to state 88
    iteration_stmt  go to state 89
    switch_stmt     go to state 90


state 68

    7 var_declaration: declare_type type_specifier . declare_id ID ';' declare_var
    8 arr_declaration: declare_type type_specifier . declare_id ID '[' declare_size NUM ']' ';' declare_arr
   91 declare_id: .

    $default  reduce using rule 91 (declare_id)

    declare_id  go to state 91


state 69

   57 factor: '(' expression . ')'

    ')'  shift, and go to state 92


state 70

   31 expression_stmt: "break" ';' . break_stmt
   88 break_stmt: .

    $default  reduce using rule 88 (break_stmt)

    break_stmt  go to state 93


state 71

   36 return_stmt: "return" ';' .

    $default  reduce using rule 36 (return_stmt)


state 72

   37 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 94


state 73

   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   61     | "output" '(' . expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 95
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 74

   30 expression_stmt: expression ';' .

    $default  reduce using rule 30 (expression_stmt)


state 75

   44 expression: var assign_chain_inc . '=' expression assign

    '='  shift, and go to state 96


state 76

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: additive_expression '<' . additive_expression lt
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var                  go to state 97
    additive_expression  go to state 98
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 77

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   49 simple_expression: additive_expression "==" . additive_expression eq
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var                  go to state 97
    additive_expression  go to state 99
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 78

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   51 additive_expression: additive_expression '+' . term add
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 97
    term        go to state 100
    factor      go to state 63
    call        go to state 64
    push_id     go to state 65
    save_const  go to state 66


state 79

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   52 additive_expression: additive_expression '-' . term sub
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 97
    term        go to state 101
    factor      go to state 63
    call        go to state 64
    push_id     go to state 65
    save_const  go to state 66


state 80

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   54 term: term '*' . factor mult
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 97
    factor      go to state 102
    call        go to state 64
    push_id     go to state 65
    save_const  go to state 66


state 81

   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   55 term: term '/' . factor div
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    var         go to state 97
    factor      go to state 103
    call        go to state 64
    push_id     go to state 65
    save_const  go to state 66


state 82

   46 var: push_id ID .  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   47    | push_id ID . '[' expression ']' index_addr
   62 call: push_id ID . '(' call_args_start args ')' call_fun

    '['  shift, and go to state 104
    '('  shift, and go to state 105

    $default  reduce using rule 46 (var)


state 83

   60 factor: save_const NUM .

    $default  reduce using rule 60 (factor)


state 84

   33 selection_stmt: "if" . '(' expression ')' save statement "endif" if_block
   34               | "if" . '(' expression ')' save statement save "else" label statement "endif" ifelse

    '('  shift, and go to state 106


state 85

   35 iteration_stmt: "while" . '(' label expression ')' save statement while_loop

    '('  shift, and go to state 107


state 86

   38 switch_stmt: "switch" . '(' expression ')' '{' case_stmts default_stmt '}' switch_block

    '('  shift, and go to state 108


state 87

   25 statement: start_scope compound_stmt . end_scope
   82 end_scope: .

    $default  reduce using rule 82 (end_scope)

    end_scope  go to state 109


state 88

   26 statement: start_scope selection_stmt . end_scope
   82 end_scope: .

    $default  reduce using rule 82 (end_scope)

    end_scope  go to state 110


state 89

   27 statement: start_scope iteration_stmt . end_scope
   82 end_scope: .

    $default  reduce using rule 82 (end_scope)

    end_scope  go to state 111


state 90

   29 statement: start_scope switch_stmt . end_scope
   82 end_scope: .

    $default  reduce using rule 82 (end_scope)

    end_scope  go to state 112


state 91

    7 var_declaration: declare_type type_specifier declare_id . ID ';' declare_var
    8 arr_declaration: declare_type type_specifier declare_id . ID '[' declare_size NUM ']' ';' declare_arr

    ID  shift, and go to state 113


state 92

   57 factor: '(' expression ')' .

    $default  reduce using rule 57 (factor)


state 93

   31 expression_stmt: "break" ';' break_stmt .

    $default  reduce using rule 31 (expression_stmt)


state 94

   37 return_stmt: "return" expression ';' .

    $default  reduce using rule 37 (return_stmt)


state 95

   61 call: "output" '(' expression . ')' output

    ')'  shift, and go to state 114


state 96

   44 expression: . var assign_chain_inc '=' expression assign
   44           | var assign_chain_inc '=' . expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 115
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 97

   58 factor: var .

    $default  reduce using rule 58 (factor)


state 98

   48 simple_expression: additive_expression '<' additive_expression . lt
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub
   72 lt: .  [';', ']', ')', ',']

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79

    $default  reduce using rule 72 (lt)

    lt  go to state 116


state 99

   49 simple_expression: additive_expression "==" additive_expression . eq
   51 additive_expression: additive_expression . '+' term add
   52                    | additive_expression . '-' term sub
   75 eq: .  [';', ']', ')', ',']

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79

    $default  reduce using rule 75 (eq)

    eq  go to state 117


state 100

   51 additive_expression: additive_expression '+' term . add
   54 term: term . '*' factor mult
   55     | term . '/' factor div
   73 add: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 73 (add)

    add  go to state 118


state 101

   52 additive_expression: additive_expression '-' term . sub
   54 term: term . '*' factor mult
   55     | term . '/' factor div
   77 sub: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 77 (sub)

    sub  go to state 119


state 102

   54 term: term '*' factor . mult
   76 mult: .

    $default  reduce using rule 76 (mult)

    mult  go to state 120


state 103

   55 term: term '/' factor . div
   74 div: .

    $default  reduce using rule 74 (div)

    div  go to state 121


state 104

   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   47    | push_id ID '[' . expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 122
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 105

   62 call: push_id ID '(' . call_args_start args ')' call_fun
   98 call_args_start: .

    $default  reduce using rule 98 (call_args_start)

    call_args_start  go to state 123


state 106

   33 selection_stmt: "if" '(' . expression ')' save statement "endif" if_block
   34               | "if" '(' . expression ')' save statement save "else" label statement "endif" ifelse
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 124
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 107

   35 iteration_stmt: "while" '(' . label expression ')' save statement while_loop
   71 label: .

    $default  reduce using rule 71 (label)

    label  go to state 125


state 108

   38 switch_stmt: "switch" '(' . expression ')' '{' case_stmts default_stmt '}' switch_block
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 126
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 109

   25 statement: start_scope compound_stmt end_scope .

    $default  reduce using rule 25 (statement)


state 110

   26 statement: start_scope selection_stmt end_scope .

    $default  reduce using rule 26 (statement)


state 111

   27 statement: start_scope iteration_stmt end_scope .

    $default  reduce using rule 27 (statement)


state 112

   29 statement: start_scope switch_stmt end_scope .

    $default  reduce using rule 29 (statement)


state 113

    7 var_declaration: declare_type type_specifier declare_id ID . ';' declare_var
    8 arr_declaration: declare_type type_specifier declare_id ID . '[' declare_size NUM ']' ';' declare_arr

    ';'  shift, and go to state 18
    '['  shift, and go to state 19


state 114

   61 call: "output" '(' expression ')' . output
   80 output: .

    $default  reduce using rule 80 (output)

    output  go to state 127


state 115

   44 expression: var assign_chain_inc '=' expression . assign
   78 assign: .

    $default  reduce using rule 78 (assign)

    assign  go to state 128


state 116

   48 simple_expression: additive_expression '<' additive_expression lt .

    $default  reduce using rule 48 (simple_expression)


state 117

   49 simple_expression: additive_expression "==" additive_expression eq .

    $default  reduce using rule 49 (simple_expression)


state 118

   51 additive_expression: additive_expression '+' term add .

    $default  reduce using rule 51 (additive_expression)


state 119

   52 additive_expression: additive_expression '-' term sub .

    $default  reduce using rule 52 (additive_expression)


state 120

   54 term: term '*' factor mult .

    $default  reduce using rule 54 (term)


state 121

   55 term: term '/' factor div .

    $default  reduce using rule 55 (term)


state 122

   47 var: push_id ID '[' expression . ']' index_addr

    ']'  shift, and go to state 129


state 123

   62 call: push_id ID '(' call_args_start . args ')' call_fun
   63 args: . arg_list
   64     | .  [')']
   65 arg_list: . arg_list ',' new_call_arg expression
   66         | . new_call_arg expression
   99 new_call_arg: .  [NUM, ID, '(', "output"]

    ')'       reduce using rule 64 (args)
    $default  reduce using rule 99 (new_call_arg)

    args          go to state 130
    arg_list      go to state 131
    new_call_arg  go to state 132


state 124

   33 selection_stmt: "if" '(' expression . ')' save statement "endif" if_block
   34               | "if" '(' expression . ')' save statement save "else" label statement "endif" ifelse

    ')'  shift, and go to state 133


state 125

   35 iteration_stmt: "while" '(' label . expression ')' save statement while_loop
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 134
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 126

   38 switch_stmt: "switch" '(' expression . ')' '{' case_stmts default_stmt '}' switch_block

    ')'  shift, and go to state 135


state 127

   61 call: "output" '(' expression ')' output .

    $default  reduce using rule 61 (call)


state 128

   44 expression: var assign_chain_inc '=' expression assign .

    $default  reduce using rule 44 (expression)


state 129

   47 var: push_id ID '[' expression ']' . index_addr
   89 index_addr: .

    $default  reduce using rule 89 (index_addr)

    index_addr  go to state 136


state 130

   62 call: push_id ID '(' call_args_start args . ')' call_fun

    ')'  shift, and go to state 137


state 131

   63 args: arg_list .  [')']
   65 arg_list: arg_list . ',' new_call_arg expression

    ','  shift, and go to state 138

    $default  reduce using rule 63 (args)


state 132

   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   66 arg_list: new_call_arg . expression
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 139
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 133

   33 selection_stmt: "if" '(' expression ')' . save statement "endif" if_block
   34               | "if" '(' expression ')' . save statement save "else" label statement "endif" ifelse
   69 save: .

    $default  reduce using rule 69 (save)

    save  go to state 140


state 134

   35 iteration_stmt: "while" '(' label expression . ')' save statement while_loop

    ')'  shift, and go to state 141


state 135

   38 switch_stmt: "switch" '(' expression ')' . '{' case_stmts default_stmt '}' switch_block

    '{'  shift, and go to state 142


state 136

   47 var: push_id ID '[' expression ']' index_addr .

    $default  reduce using rule 47 (var)


state 137

   62 call: push_id ID '(' call_args_start args ')' . call_fun
   90 call_fun: .

    $default  reduce using rule 90 (call_fun)

    call_fun  go to state 143


state 138

   65 arg_list: arg_list ',' . new_call_arg expression
   99 new_call_arg: .

    $default  reduce using rule 99 (new_call_arg)

    new_call_arg  go to state 144


state 139

   66 arg_list: new_call_arg expression .

    $default  reduce using rule 66 (arg_list)


state 140

   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   33 selection_stmt: "if" '(' expression ')' save . statement "endif" if_block
   34               | "if" '(' expression ')' save . statement save "else" label statement "endif" ifelse
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 81 (start_scope)

    statement            go to state 145
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67


state 141

   35 iteration_stmt: "while" '(' label expression ')' . save statement while_loop
   69 save: .

    $default  reduce using rule 69 (save)

    save  go to state 146


state 142

   38 switch_stmt: "switch" '(' expression ')' '{' . case_stmts default_stmt '}' switch_block
   39 case_stmts: . case_stmts case_stmt label
   40           | .

    $default  reduce using rule 40 (case_stmts)

    case_stmts  go to state 147


state 143

   62 call: push_id ID '(' call_args_start args ')' call_fun .

    $default  reduce using rule 62 (call)


state 144

   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   65 arg_list: arg_list ',' new_call_arg . expression
   67 push_id: .  [ID]
   68 save_const: .  [NUM]

    '('       shift, and go to state 50
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    $default  reduce using rule 67 (push_id)

    expression           go to state 148
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66


state 145

   33 selection_stmt: "if" '(' expression ')' save statement . "endif" if_block
   34               | "if" '(' expression ')' save statement . save "else" label statement "endif" ifelse
   69 save: .  ["else"]

    "endif"  shift, and go to state 149

    $default  reduce using rule 69 (save)

    save  go to state 150


state 146

   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   35 iteration_stmt: "while" '(' label expression ')' save . statement while_loop
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 81 (start_scope)

    statement            go to state 151
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67


state 147

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts . default_stmt '}' switch_block
   39 case_stmts: case_stmts . case_stmt label
   41 case_stmt: . new_case "case" save_const NUM ':' save empty_cell statement_list
   42 default_stmt: . "default" ':' statement_list
   43             | .  ['}']
   87 new_case: .  ["case"]

    "default"  shift, and go to state 152

    "case"    reduce using rule 87 (new_case)
    $default  reduce using rule 43 (default_stmt)

    case_stmt     go to state 153
    default_stmt  go to state 154
    new_case      go to state 155


state 148

   65 arg_list: arg_list ',' new_call_arg expression .

    $default  reduce using rule 65 (arg_list)


state 149

   33 selection_stmt: "if" '(' expression ')' save statement "endif" . if_block
   84 if_block: .

    $default  reduce using rule 84 (if_block)

    if_block  go to state 156


state 150

   34 selection_stmt: "if" '(' expression ')' save statement save . "else" label statement "endif" ifelse

    "else"  shift, and go to state 157


state 151

   35 iteration_stmt: "while" '(' label expression ')' save statement . while_loop
   85 while_loop: .

    $default  reduce using rule 85 (while_loop)

    while_loop  go to state 158


state 152

   42 default_stmt: "default" . ':' statement_list

    ':'  shift, and go to state 159


state 153

   39 case_stmts: case_stmts case_stmt . label
   71 label: .

    $default  reduce using rule 71 (label)

    label  go to state 160


state 154

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt . '}' switch_block

    '}'  shift, and go to state 161


state 155

   41 case_stmt: new_case . "case" save_const NUM ':' save empty_cell statement_list

    "case"  shift, and go to state 162


state 156

   33 selection_stmt: "if" '(' expression ')' save statement "endif" if_block .

    $default  reduce using rule 33 (selection_stmt)


state 157

   34 selection_stmt: "if" '(' expression ')' save statement save "else" . label statement "endif" ifelse
   71 label: .

    $default  reduce using rule 71 (label)

    label  go to state 163


state 158

   35 iteration_stmt: "while" '(' label expression ')' save statement while_loop .

    $default  reduce using rule 35 (iteration_stmt)


state 159

   22 statement_list: . statement_list statement
   23               | .
   42 default_stmt: "default" ':' . statement_list

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 164


state 160

   39 case_stmts: case_stmts case_stmt label .

    $default  reduce using rule 39 (case_stmts)


state 161

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' . switch_block
   86 switch_block: .

    $default  reduce using rule 86 (switch_block)

    switch_block  go to state 165


state 162

   41 case_stmt: new_case "case" . save_const NUM ':' save empty_cell statement_list
   68 save_const: .

    $default  reduce using rule 68 (save_const)

    save_const  go to state 166


state 163

   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   34 selection_stmt: "if" '(' expression ')' save statement save "else" label . statement "endif" ifelse
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    $default  reduce using rule 81 (start_scope)

    statement            go to state 167
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67


state 164

   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   42 default_stmt: "default" ':' statement_list .  ['}']
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM       reduce using rule 68 (save_const)
    ID        reduce using rule 67 (push_id)
    '}'       reduce using rule 42 (default_stmt)
    $default  reduce using rule 81 (start_scope)

    statement            go to state 55
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67


state 165

   38 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' switch_block .

    $default  reduce using rule 38 (switch_stmt)


state 166

   41 case_stmt: new_case "case" save_const . NUM ':' save empty_cell statement_list

    NUM  shift, and go to state 168


state 167

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement . "endif" ifelse

    "endif"  shift, and go to state 169


state 168

   41 case_stmt: new_case "case" save_const NUM . ':' save empty_cell statement_list

    ':'  shift, and go to state 170


state 169

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" . ifelse
   83 ifelse: .

    $default  reduce using rule 83 (ifelse)

    ifelse  go to state 171


state 170

   41 case_stmt: new_case "case" save_const NUM ':' . save empty_cell statement_list
   69 save: .

    $default  reduce using rule 69 (save)

    save  go to state 172


state 171

   34 selection_stmt: "if" '(' expression ')' save statement save "else" label statement "endif" ifelse .

    $default  reduce using rule 34 (selection_stmt)


state 172

   41 case_stmt: new_case "case" save_const NUM ':' save . empty_cell statement_list
   70 empty_cell: .

    $default  reduce using rule 70 (empty_cell)

    empty_cell  go to state 173


state 173

   22 statement_list: . statement_list statement
   23               | .
   41 case_stmt: new_case "case" save_const NUM ':' save empty_cell . statement_list

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 174


state 174

   22 statement_list: statement_list . statement
   24 statement: . expression_stmt
   25          | . start_scope compound_stmt end_scope
   26          | . start_scope selection_stmt end_scope
   27          | . start_scope iteration_stmt end_scope
   28          | . return_stmt
   29          | . start_scope switch_stmt end_scope
   30 expression_stmt: . expression ';'
   31                | . "break" ';' break_stmt
   32                | . ';'
   36 return_stmt: . "return" ';'
   37            | . "return" expression ';'
   41 case_stmt: new_case "case" save_const NUM ':' save empty_cell statement_list .  ['}', "case", "default"]
   44 expression: . var assign_chain_inc '=' expression assign
   45           | . simple_expression
   46 var: . push_id ID
   47    | . push_id ID '[' expression ']' index_addr
   48 simple_expression: . additive_expression '<' additive_expression lt
   49                  | . additive_expression "==" additive_expression eq
   50                  | . additive_expression
   51 additive_expression: . additive_expression '+' term add
   52                    | . additive_expression '-' term sub
   53                    | . term
   54 term: . term '*' factor mult
   55     | . term '/' factor div
   56     | . factor
   57 factor: . '(' expression ')'
   58       | . var
   59       | . call
   60       | . save_const NUM
   61 call: . "output" '(' expression ')' output
   62     | . push_id ID '(' call_args_start args ')' call_fun
   67 push_id: .  [ID]
   68 save_const: .  [NUM]
   81 start_scope: .  ['{', "if", "while", "switch"]

    ';'       shift, and go to state 49
    '('       shift, and go to state 50
    "break"   shift, and go to state 52
    "return"  shift, and go to state 53
    "output"  shift, and go to state 54

    NUM        reduce using rule 68 (save_const)
    ID         reduce using rule 67 (push_id)
    '}'        reduce using rule 41 (case_stmt)
    "case"     reduce using rule 41 (case_stmt)
    "default"  reduce using rule 41 (case_stmt)
    $default   reduce using rule 81 (start_scope)

    statement            go to state 55
    expression_stmt      go to state 56
    return_stmt          go to state 57
    expression           go to state 58
    var                  go to state 59
    simple_expression    go to state 60
    additive_expression  go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    push_id              go to state 65
    save_const           go to state 66
    start_scope          go to state 67
